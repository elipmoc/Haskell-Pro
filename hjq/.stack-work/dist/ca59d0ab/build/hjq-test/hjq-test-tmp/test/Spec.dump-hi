
==================== FINAL INTERFACE ====================
2017-12-07 14:47:45.6444803 UTC

interface main@main:Main 8002
  interface hash: 52ba2fefe428a140cbb673e85a8ce5b1
  ABI hash: 46065894fbf4c02195474f2698d60146
  export-list hash: 887472d19f3f89e2a9e3836c9478e0ce
  orphan hash: 5b37d36156301c36e291ef90d389bec6
  flag hash: 13db57ddb479d0258e99f007b904488e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.applyFilterTest
  Main.executeQueryTest
  Main.jqFilterParserSpacesTest
  Main.jqFilterParserTest
  Main.jqQueryParserSpacesTest
  Main.jqQueryParserTest
  Main.main
  Main.testData
  Main.unsafeParseQuery
  Main.unsafeParserFilter
module dependencies:
package dependencies: HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      Win32-2.3.1.1@Win32-2.3.1.1
                      adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp
                      aeson-1.1.2.0@aeson-1.1.2.0-IYYaF432Hu8HQKp7no3ap1
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-m1TEyTenyr5nJN40TpHVj
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      call-stack-0.1.0@call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
                      comonad-5.0.2@comonad-5.0.2-Fq9Xy9jdx6uIyJZn00E6Yc
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-29zF0Im431177ovfbHYCGv
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.3@distributive-0.5.3-IX4kyVcHAyoH4uFYrsjY1R
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      free-4.12.4@free-4.12.4-C2gBQV0m8J42HxqSLTFyVx
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      hjq-0.1.0.0@hjq-0.1.0.0-LRLqA3DxDyN3IXZOx6e6qQ integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX
                      lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW
                      lens-aeson-1.0.2@lens-aeson-1.0.2-43qoalhLTu915Xc2si0fma
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      semigroupoids-5.2.1@semigroupoids-5.2.1-Db8txM8kTsI6Y49CY6g5Jn
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         lens-aeson-1.0.2@lens-aeson-1.0.2-43qoalhLTu915Xc2si0fma:Data.Aeson.Lens
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp:Data.Functor.Rep
                         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Fix
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Day
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Yoneda
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.At
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Internal.Indexed
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Reified
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Tuple
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Wrapped
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Zoom
                         lens-aeson-1.0.2@lens-aeson-1.0.2-43qoalhLTu915Xc2si0fma:Data.Aeson.Lens
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI:Test.HUnit 430ab81af3668b12bae4950025858f90
import  -/  HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI:Test.HUnit.Base f0a9278b48574d2c877b887c21718635
import  -/  HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI:Test.HUnit.Text 6753931dd2c8c4d539d7452dc50c9749
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-IYYaF432Hu8HQKp7no3ap1:Data.Aeson 2c2ea416ea3f3f7ead4fbc7d22c60646
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-IYYaF432Hu8HQKp7no3ap1:Data.Aeson.Types.Internal c2b7e48c55f4f3192a35e330eb07e54f
import  -/  base-4.9.1.0:Data.Either 186ef9adf6b47e24f39efe9b2e18e352
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hjq-0.1.0.0@hjq-0.1.0.0-LRLqA3DxDyN3IXZOx6e6qQ:Data.Hjq.Parser 543bcd70f4a83971496feb0a88d92cdd
import  -/  hjq-0.1.0.0@hjq-0.1.0.0-LRLqA3DxDyN3IXZOx6e6qQ:Data.Hjq.Query 3938a649a5034bae7c3929faaf87699d
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens 51c282815697462fb4c0814abcb89573
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Fold 85b72028b5edba38936404deb33bd848
import  -/  lens-aeson-1.0.2@lens-aeson-1.0.2-43qoalhLTu915Xc2si0fma:Data.Aeson.Lens b8384305855d57f93f92a431497fbcef
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text 60ee6e2213faa3c3f5680c74ec6dedf8
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 95940720afdbe18ada37ea3a0ad8c1a0
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show 40865a8ac26dfeb4439a938ac126bf98
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict d885b1d9a1e033a14f7012d569830271
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector 1403384d2f6b40dd8aab4268ede0dcdf
b1788186de6783dd563c55d7d4cde207
  $s$fEqEither ::
    GHC.Classes.Eq
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                  (Data.Either.$fEqEither_$c==
                     @ Data.Text.Internal.Text
                     @ Data.Aeson.Types.Internal.Value
                     Data.Aeson.Types.Internal.$fEqValue
                     Data.Text.$fEqText)
                  (Data.Either.$fEqEither_$c/=
                     @ Data.Text.Internal.Text
                     @ Data.Aeson.Types.Internal.Value
                     Data.Aeson.Types.Internal.$fEqValue
                     Data.Text.$fEqText) -}
810f6e572f815855de8c3effb0504dc3
  $s$fEqEither1 ::
    GHC.Classes.Eq
      (Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                  (Data.Either.$fEqEither_$c==
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqQuery
                     Data.Hjq.Parser.$fEqJqQuery
                     Data.Text.$fEqText)
                  (Data.Either.$fEqEither_$c/=
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqQuery
                     Data.Hjq.Parser.$fEqJqQuery
                     Data.Text.$fEqText) -}
c56139dde09d16f07cdd191a0bcdd19f
  $s$fEqEither2 ::
    GHC.Classes.Eq
      (Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                  (Data.Either.$fEqEither_$c==
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqFilter
                     Data.Hjq.Parser.$fEqJqFilter
                     Data.Text.$fEqText)
                  (Data.Either.$fEqEither_$c/=
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqFilter
                     Data.Hjq.Parser.$fEqJqFilter
                     Data.Text.$fEqText) -}
c329e56ed98fa8e882d8a7b57537c232
  $s$fEqMaybe ::
    GHC.Classes.Eq
      (GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe
                       (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                  Main.$s$fEqMaybe2
                  (GHC.Base.$fEqMaybe_$c/=
                     @ (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                     Main.$s$fEqMaybe1) -}
9e3d1001e4ac0af1d167c313e1da49cb
  $s$fEqMaybe1 ::
    GHC.Classes.Eq
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fEqEither -}
49fab5dd83602e360ac39657c7ab98e6
  $s$fEqMaybe2 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: GHC.Base.Maybe
                            (Data.Either.Either
                               Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   (ds1 :: GHC.Base.Maybe
                             (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a1 of wild2 {
                             Data.Either.Left a2
                             -> case b1 of wild3 {
                                  Data.Either.Left b2 -> Data.Text.$fEqText_$c== a2 b2
                                  Data.Either.Right ipv -> GHC.Types.False }
                             Data.Either.Right a2
                             -> case b1 of wild3 {
                                  Data.Either.Left ipv -> GHC.Types.False
                                  Data.Either.Right b2
                                  -> Data.Aeson.Types.Internal.$fEqValue_$c== a2 b2 } } } }) -}
8b365320e92036b7a705858e453e03f8
  $s$fShowEither ::
    GHC.Show.Show
      (Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqQuery
                     Data.Hjq.Parser.$fShowJqQuery
                     Data.Text.Show.$fShowText)
                  (Data.Either.$fShowEither_$cshow
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqQuery
                     Data.Hjq.Parser.$fShowJqQuery
                     Data.Text.Show.$fShowText)
                  Main.$s$fShowEither_$s$fShowEither_$cshowList -}
44ea6a1dbbd8b5f49dd1aa5ae06e75f9
  $s$fShowEither1 ::
    GHC.Show.Show
      (Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqFilter
                     Data.Hjq.Parser.$fShowJqFilter
                     Data.Text.Show.$fShowText)
                  (Data.Either.$fShowEither_$cshow
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqFilter
                     Data.Hjq.Parser.$fShowJqFilter
                     Data.Text.Show.$fShowText)
                  Main.$s$fShowEither_$s$fShowEither_$cshowList1 -}
74eb47ffb7af9c0b908cfece6f672413
  $s$fShowEither2 ::
    GHC.Show.Show
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Data.Text.Internal.Text
                     @ Data.Aeson.Types.Internal.Value
                     Data.Aeson.Types.Internal.$fShowValue
                     Data.Text.Show.$fShowText)
                  (Data.Either.$fShowEither_$cshow
                     @ Data.Text.Internal.Text
                     @ Data.Aeson.Types.Internal.Value
                     Data.Aeson.Types.Internal.$fShowValue
                     Data.Text.Show.$fShowText)
                  Main.$s$fShowEither_$s$fShowEither_$cshowList2 -}
e2a3b5fdc85e0a86d1411353341db022
  $s$fShowEither_$s$fShowEither_$cshowList ::
    [Data.Either.Either
       Data.Text.Internal.Text Data.Hjq.Parser.JqQuery]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Data.Either.Either
                              Data.Text.Internal.Text Data.Hjq.Parser.JqQuery])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ Data.Text.Internal.Text
                      @ Data.Hjq.Parser.JqQuery
                      Data.Hjq.Parser.$fShowJqQuery
                      Data.Text.Show.$fShowText
                      Data.Either.$fShowEither1)
                   eta
                   eta1) -}
613f8e249964a47139d34c3c180ec11d
  $s$fShowEither_$s$fShowEither_$cshowList1 ::
    [Data.Either.Either
       Data.Text.Internal.Text Data.Hjq.Parser.JqFilter]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Data.Either.Either
                              Data.Text.Internal.Text Data.Hjq.Parser.JqFilter])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ Data.Text.Internal.Text
                      @ Data.Hjq.Parser.JqFilter
                      Data.Hjq.Parser.$fShowJqFilter
                      Data.Text.Show.$fShowText
                      Data.Either.$fShowEither1)
                   eta
                   eta1) -}
d4bdceba032db4437bbc39dde0c4aff6
  $s$fShowEither_$s$fShowEither_$cshowList2 ::
    [Data.Either.Either
       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Data.Either.Either
                              Data.Text.Internal.Text Data.Aeson.Types.Internal.Value])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ Data.Text.Internal.Text
                      @ Data.Aeson.Types.Internal.Value
                      Data.Aeson.Types.Internal.$fShowValue
                      Data.Text.Show.$fShowText
                      Data.Either.$fShowEither1)
                   eta
                   eta1) -}
40bc2cecee0cc5b3690523e44a941c41
  $s$fShowMaybe ::
    GHC.Show.Show
      (GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe
                       (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                     Main.$s$fShowMaybe1)
                  (GHC.Show.$fShowMaybe_$cshow
                     @ (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                     Main.$s$fShowMaybe1)
                  Main.$s$fShowMaybe_$s$fShowMaybe_$cshowList -}
5dac8a70b6edeed191d1bdec6c10a75c
  $s$fShowMaybe1 ::
    GHC.Show.Show
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fShowEither2 -}
9eb5736f408f24c9facb8816aeb2d35f
  $s$fShowMaybe_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe
       (Data.Either.Either
          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe
                              (Data.Either.Either
                                 Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      Main.$s$fShowMaybe1
                      GHC.Show.shows22)
                   eta
                   eta1) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
136110f3eaccd81a31f45369439574ae
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 letrec {
                   $wgo1 :: GHC.Prim.ByteArray#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> v
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     let {
                       k2 :: Data.Text.Internal.Text = Data.Text.Internal.Text ww3 ww4 ww5
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww7 ww8) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# ww5 dt5) of wild3 {
                            GHC.Types.False
                            -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.State#
                                                                                                                       GHC.Prim.RealWorld
                                                                                                                  -> (# GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld,
                                                                                                                        GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                               case GHC.Prim.narrow32Int# ds12 of wild5 {
                                 DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> case GHC.Prim.thawArray#
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           @ GHC.Prim.RealWorld
                                           ww6
                                           0#
                                           (GHC.Prim.sizeofArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww6)
                                           GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                                    case GHC.Prim.writeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           ww7
                                           (Data.HashMap.Base.L
                                              @ Data.Text.Internal.Text
                                              @ v
                                              k2
                                              (w k2 w3 y))
                                           ipv4 of s' { DEFAULT ->
                                    case GHC.Prim.unsafeFreezeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           s' of ds2 { (#,#) ipv6 ipv7 ->
                                    ipv7 } } } } } } } } }
                       GHC.Types.True
                       -> case GHC.Prim.newArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.+# ww8 1#)
                                 (Data.HashMap.Array.undefinedElem
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                 GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                          case GHC.Prim.copyArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 ww6
                                 0#
                                 ipv4
                                 0#
                                 ww8
                                 ipv3 of s2 { DEFAULT ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 ww8
                                 (Data.HashMap.Base.L @ Data.Text.Internal.Text @ v k2 w3)
                                 s2 of s' { DEFAULT ->
                          case GHC.Prim.unsafeFreezeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 s' of ds1 { (#,#) ipv5 ipv6 ->
                          ipv6 } } } } }
                 } in
                 $wgo1
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
4e4768094c2a28740d266233f489a8c9
  $w$slookup ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.narrow32Int# (GHC.Prim.uncheckedIShiftL# ww1 1#))
                        (GHC.Prim.narrow32Int# (GHC.Prim.uncheckedIShiftL# ww2 1#))
                        1534328996#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Main.$wpoly_go3
                   @ v
                   (GHC.Prim.int2Word# (GHC.Prim.narrow32Int# ds2))
                   ww
                   ww1
                   ww2
                   0#
                   w }) -}
dc8e9e1f2e34e693b51972cc3aab8c1b
  $w$sunsafeInsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.narrow32Int# (GHC.Prim.uncheckedIShiftL# ww1 1#))
                        (GHC.Prim.narrow32Int# (GHC.Prim.uncheckedIShiftL# ww2 1#))
                        1534328996#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 case Main.$wpoly_go4
                        @ GHC.Prim.RealWorld
                        @ v
                        (GHC.Prim.int2Word# (GHC.Prim.narrow32Int# ds2))
                        ww
                        ww1
                        ww2
                        w
                        0#
                        w1
                        GHC.Prim.realWorld# of ds { (#,#) ipv ipv1 ->
                 ipv1 } }) -}
21fe347751ae2f4136359896341a812a
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><S,U><S,U><S,U>, Inline: [0] -}
f3ecb79e0782b74a4e69e9c4b931b6a0
  $wpoly_go3 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>, Inline: [0] -}
67764441f597f9df4caf4f0dfad517af
  $wpoly_go4 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          Data.HashMap.Base.HashMap Data.Text.Internal.Text v #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,U>,
     Inline: [0] -}
b342d8ad2124f5879f05eab204b220e6
  applyFilterTest :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList Main.applyFilterTest1) -}
d8b4bde73acff9ba1451cd90c0629ec0
  applyFilterTest1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest114
                   Main.applyFilterTest2) -}
472619ef83eb6ca229ce7e803c7668f1
  applyFilterTest10 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest25
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest24
                   Main.applyFilterTest11) -}
89378c40af81c3152e559b682a277f8a
  applyFilterTest100 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest105
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest104
                   Main.applyFilterTest101) -}
8861626086dc3ca7838ac5ff8c7f24c5
  applyFilterTest101 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest102) -}
31f4000e39de1b478d81537fe13a0c1a
  applyFilterTest102 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest103 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
2e9bc1fee01f27cf8274006bd9f6a91f
  applyFilterTest103 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".string-field"#) -}
579b73e668c969025ec0abb67f1bda05
  applyFilterTest104 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "string-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just x
                        -> GHC.Base.Just
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             (Data.Either.Right
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value
                                x) } } }) -}
bdfbeb05f1c75677a182ed6eefbab1ae
  applyFilterTest105 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest106
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
8e90d7ec1b638f04d5c12dc1e3696029
  applyFilterTest106 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest107) -}
4f01e402a7626b2afbe676180d457a98
  applyFilterTest107 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest108) -}
97be76de796798dc70e392c94bfeda8b
  applyFilterTest108 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest109
                   GHC.Stack.Types.EmptyCallStack) -}
41e901840787c59fca80941b273536eb
  applyFilterTest109 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest112
                   Main.applyFilterTest32
                   Main.applyFilterTest111
                   Main.applyFilterTest110) -}
9d25287930107909d97de0f14787d79f
  applyFilterTest11 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest12) -}
c393e6cc79a37b87f69c20ee042efe09
  applyFilterTest110 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 60#) -}
51e5b05025fa107d5a0b78543492972b
  applyFilterTest111 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 105#) -}
bd64d38ddf2051d0c7d4bb3c8482dfcc
  applyFilterTest112 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 104#) -}
32d8c59a77475867b6cb36fbaea2dcbd
  applyFilterTest113 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 2"#) -}
e60edb7b1f018b486612f9d4ba487b44
  applyFilterTest114 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest129
                   Main.applyFilterTest115) -}
e3dca01189730e00013c5bd4922e7a20
  applyFilterTest115 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest116) -}
c3753ef9c462c8d9ec9054f02b88e193
  applyFilterTest116 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest121
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest120
                   Main.applyFilterTest117) -}
499053e094f4d9b4c6123754bb0e48df
  applyFilterTest117 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Main.applyFilterTest118 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
b683a32bccd22853a71d79ead6c92bb8
  applyFilterTest118 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.applyFilterTest119) -}
1c8f76dc57a86f605d05a085d4804cef
  applyFilterTest119 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "."#) -}
e76cd78b97e66e8d142aedd71d912338
  applyFilterTest12 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest23 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
92a31c0de119218f4f75ec29ce285db8
  applyFilterTest120 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Aeson.Types.Internal.Value
                   Main.testData) -}
4488272bd0cf93b4112facd9e25532cf
  applyFilterTest121 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest122
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither
                   Main.$s$fShowEither2) -}
a95e30abfd4e8dc142b7ad664dbd8eeb
  applyFilterTest122 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest123) -}
92cd86d563861a18a22c36cdce1e23f4
  applyFilterTest123 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest124) -}
f246822d93c25d554db00e9fd267fff2
  applyFilterTest124 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest125
                   GHC.Stack.Types.EmptyCallStack) -}
bc9502c925f07e159c2acd7cc94ff1c2
  applyFilterTest125 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest128
                   Main.applyFilterTest127
                   Main.applyFilterTest128
                   Main.applyFilterTest126) -}
d2ac7fd0a7d17b8da0c8d96a0727620f
  applyFilterTest126 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 97#) -}
c7d6a44130df2aaa7ffe1a75de2f9043
  applyFilterTest127 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 33#) -}
f3d3066a02c74b2150b9959c961439a0
  applyFilterTest128 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 102#) -}
9155fa44ac38a6ea761a02ef0776c21c
  applyFilterTest129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 1"#) -}
f1883197af6321013b8c13bb8fe3fe82
  applyFilterTest13 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 GHC.CString.unpackFoldrCString#
                   @ b
                   "PARSE FAILURE IN A TEST :"#
                   c
                   n) -}
ad6af2367a847d2571f9cc4ef9804a88
  applyFilterTest14 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest22
                   Main.applyFilterTest15
                   GHC.Stack.Types.EmptyCallStack) -}
1850d4c0f84003ba7a7f740016efa91e
  applyFilterTest15 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest18
                   Main.applyFilterTest17
                   Main.applyFilterTest18
                   Main.applyFilterTest16) -}
0537289c1ee8937e4c98737d29a97152
  applyFilterTest16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 62#) -}
d05aaab5ed6fc891f8c070b2a7e08b58
  applyFilterTest17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15#) -}
12f1ecac969710b1ff3f838e1a90df50
  applyFilterTest18 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 96#) -}
e4a3c1fd491ebbc0cc82c2f3bc6cc16f
  applyFilterTest19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test\\Spec.hs"#) -}
33e72b04a117c2ed69755f15337a99e8
  applyFilterTest2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest98
                   Main.applyFilterTest3) -}
308fd445c63164021cbbf26dbeccc9e1
  applyFilterTest20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Main"#) -}
2c4cf2397ef1e86b2ea00977d381f2ce
  applyFilterTest21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
dd8861bf1e166eeb125ccac81e453440
  applyFilterTest22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "error"#) -}
53b345b798ec29a1082a65e8fc780364
  applyFilterTest23 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ".array-field[2].object-in-array"#) -}
95d24725874c67ca5837dd59c6ed1f71
  applyFilterTest24 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "array-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just v
                        -> case v of wild2 {
                             DEFAULT
                             -> GHC.Base.Nothing
                                  @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             Data.Aeson.Types.Internal.Array a
                             -> case a of wild3 { Data.Vector.Vector dt dt1 dt2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# 2# dt1) of wild4 {
                                  GHC.Types.False
                                  -> GHC.Base.Nothing
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  GHC.Types.True
                                  -> case GHC.Prim.indexArray#
                                            @ Data.Aeson.Types.Internal.Value
                                            dt2
                                            (GHC.Prim.+# dt 2#) of ds1 { Unit# ipv ->
                                     case ipv of wild5 {
                                       DEFAULT
                                       -> GHC.Base.Nothing
                                            @ (Data.Either.Either
                                                 Data.Text.Internal.Text
                                                 Data.Aeson.Types.Internal.Value)
                                       Data.Aeson.Types.Internal.Object o1
                                       -> case Data.Text.Show.unpackCString#
                                                 "object-in-array"# of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                          case Main.$w$slookup
                                                 @ Data.Aeson.Types.Internal.Value
                                                 ww5
                                                 ww6
                                                 ww7
                                                 o1 of wild6 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing
                                                 @ (Data.Either.Either
                                                      Data.Text.Internal.Text
                                                      Data.Aeson.Types.Internal.Value)
                                            GHC.Base.Just x
                                            -> GHC.Base.Just
                                                 @ (Data.Either.Either
                                                      Data.Text.Internal.Text
                                                      Data.Aeson.Types.Internal.Value)
                                                 (Data.Either.Right
                                                    @ Data.Text.Internal.Text
                                                    @ Data.Aeson.Types.Internal.Value
                                                    x) } } } } } } } } } }) -}
78e7ee6059b4440043959ef14ae6fbc4
  applyFilterTest25 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest26
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
1f40e5a0f7eea87e086cb23bd0cdecf8
  applyFilterTest26 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest27) -}
0f46d8230c6b223a8b738d91fb755de0
  applyFilterTest27 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest28) -}
a675bff5d32c022f2f4ac899e54de5f0
  applyFilterTest28 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest29
                   GHC.Stack.Types.EmptyCallStack) -}
564260f2b11177c89b077882060df206
  applyFilterTest29 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest33
                   Main.applyFilterTest32
                   Main.applyFilterTest31
                   Main.applyFilterTest30) -}
8fc59f9450c7a5f7760d784ba3aa4b60
  applyFilterTest3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest83
                   Main.applyFilterTest4) -}
8f4920f5fa4c34bb440ff3a6ceca5f0c
  applyFilterTest30 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 91#) -}
a597a81f63a54bcbbcb3ddef664eb385
  applyFilterTest31 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 120#) -}
4a6d29e16ab13f5c8697001c878cdf5f
  applyFilterTest32 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 13#) -}
f2a6e2efdcfbdd1072e03162e8eb2646
  applyFilterTest33 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 119#) -}
7cabb34cbdd93a773d9e3e0f414727a8
  applyFilterTest34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "~?="#) -}
266f68bdb8c9d8e0d4221fec81804886
  applyFilterTest35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 7"#) -}
3f5af0f95ff9653f1acaad959ff1a3ee
  applyFilterTest36 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest51
                   Main.applyFilterTest37) -}
c4be3f27337b94cd8b7923c0142770a6
  applyFilterTest37 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest38) -}
c7d5ace1f3558a4cd10b02ad2da2e4c1
  applyFilterTest38 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest43
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest42
                   Main.applyFilterTest39) -}
8dc6f23308e011b681ced6b96fb992e4
  applyFilterTest39 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest40) -}
6649ab996d36d73c86ff269c5c63b2d7
  applyFilterTest4 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest67
                   Main.applyFilterTest5) -}
96e36d322cb3eb853b751aa8e580f715
  applyFilterTest40 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest41 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
1446b2d1cb8c9a830a88b88d8e1c22a7
  applyFilterTest41 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".array-field[1]"#) -}
78c65016ec3e7cf765b13a630011537c
  applyFilterTest42 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "array-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just v
                        -> case v of wild2 {
                             DEFAULT
                             -> GHC.Base.Nothing
                                  @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             Data.Aeson.Types.Internal.Array a
                             -> case a of wild3 { Data.Vector.Vector dt dt1 dt2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# 1# dt1) of wild4 {
                                  GHC.Types.False
                                  -> GHC.Base.Nothing
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  GHC.Types.True
                                  -> GHC.Base.Just
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                       (Data.Either.Right
                                          @ Data.Text.Internal.Text
                                          @ Data.Aeson.Types.Internal.Value
                                          (case GHC.Prim.indexArray#
                                                  @ Data.Aeson.Types.Internal.Value
                                                  dt2
                                                  (GHC.Prim.+# dt 1#) of ds1 { Unit# ipv ->
                                           ipv })) } } } } } }) -}
69f5cf117cdd1aa63a9153082eca0ec3
  applyFilterTest43 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest44
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
6d44cc77f9123d1a2996225f683e762c
  applyFilterTest44 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest45) -}
adae3ba8258533454e7e93c1adb83e09
  applyFilterTest45 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest46) -}
b72300a584171c235b9c8a878dadb76b
  applyFilterTest46 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest47
                   GHC.Stack.Types.EmptyCallStack) -}
c45707be4faced43599b01528c39bc6e
  applyFilterTest47 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest50
                   Main.applyFilterTest32
                   Main.applyFilterTest49
                   Main.applyFilterTest48) -}
df20d891b8538a664fd0426d77162b98
  applyFilterTest48 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 67#) -}
ef3ec43329ef959bc4fb46967d725bc4
  applyFilterTest49 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 117#) -}
8be719d434be7b4032425968ca6380d3
  applyFilterTest5 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest52
                   Main.applyFilterTest6) -}
2113a8e4d790edea502fe512271fb0a7
  applyFilterTest50 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 116#) -}
5b65070c9eadeedf9c18702ed189fc74
  applyFilterTest51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 6"#) -}
3ec8364a05b1cfb9a7c04e6298678c07
  applyFilterTest52 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest66
                   Main.applyFilterTest53) -}
945772f295c93f1d04632d83eda3337c
  applyFilterTest53 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest54) -}
bbe721830efdc85a3ee670bbf836b36c
  applyFilterTest54 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest59
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest58
                   Main.applyFilterTest55) -}
11ab1bd1812fceed1578db36cc420284
  applyFilterTest55 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest56) -}
1b8b6c4d99f1b9cb65ace5aa99232146
  applyFilterTest56 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest57 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
a360e291be5de3c18b08a589d2364ae3
  applyFilterTest57 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".array-field[0]"#) -}
ec0e03a65836f92ed77d584ed15cd28f
  applyFilterTest58 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "array-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just v
                        -> case v of wild2 {
                             DEFAULT
                             -> GHC.Base.Nothing
                                  @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             Data.Aeson.Types.Internal.Array a
                             -> case a of wild3 { Data.Vector.Vector dt dt1 dt2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# 0# dt1) of wild4 {
                                  GHC.Types.False
                                  -> GHC.Base.Nothing
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  GHC.Types.True
                                  -> GHC.Base.Just
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                       (Data.Either.Right
                                          @ Data.Text.Internal.Text
                                          @ Data.Aeson.Types.Internal.Value
                                          (case GHC.Prim.indexArray#
                                                  @ Data.Aeson.Types.Internal.Value
                                                  dt2
                                                  dt of ds1 { Unit# ipv ->
                                           ipv })) } } } } } }) -}
e2bf2f9e0fcbf86a579a62e4893221d9
  applyFilterTest59 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest60
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
88298a5598cc97dcfa3e0ccbd6312184
  applyFilterTest6 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest36
                   Main.applyFilterTest7) -}
84dcb6ed5eb8cdfb494a3ed1cf2d835e
  applyFilterTest60 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest61) -}
98557432e9b1b97266ba471d6c4edb07
  applyFilterTest61 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest62) -}
64b17da278811497efc1a02a8eab04b4
  applyFilterTest62 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest63
                   GHC.Stack.Types.EmptyCallStack) -}
665b67442c130290b8651ef728aaa05b
  applyFilterTest63 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest65
                   Main.applyFilterTest32
                   Main.applyFilterTest64
                   Main.applyFilterTest48) -}
cdb347cd0fe5eeb596f7cd1ae26cc2ae
  applyFilterTest64 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 114#) -}
6cdc37b20f162d0472f9a641b3c9513f
  applyFilterTest65 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 113#) -}
e046e5ab8a25459df65fe1980b67fe8f
  applyFilterTest66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 5"#) -}
95f18246f57ef83e4f2cb54863a5c73a
  applyFilterTest67 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest82
                   Main.applyFilterTest68) -}
9ca2a3ee9a26283344432559dfaf1351
  applyFilterTest68 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest69) -}
b0c2dba55fb56388de1ed20c82bd4e0c
  applyFilterTest69 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest74
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest73
                   Main.applyFilterTest70) -}
d88d49fca1099b04f4eb58e7c637278a
  applyFilterTest7 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest8
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
6b823a5afc296846e9bb822653934b10
  applyFilterTest70 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest71) -}
cad21adb736ec6e990b593dd1cb14de9
  applyFilterTest71 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest72 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
65fed6baf807bdc96cdd91a6542c4028
  applyFilterTest72 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ".nested-field.inner-number"#) -}
fbc441e04ca3cfdb5bdc0d3ea2098aac
  applyFilterTest73 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "nested-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just v
                        -> case v of wild2 {
                             DEFAULT
                             -> GHC.Base.Nothing
                                  @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             Data.Aeson.Types.Internal.Object o1
                             -> case Data.Text.Show.unpackCString#
                                       "inner-number"# of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                case Main.$w$slookup
                                       @ Data.Aeson.Types.Internal.Value
                                       ww5
                                       ww6
                                       ww7
                                       o1 of wild3 {
                                  GHC.Base.Nothing
                                  -> GHC.Base.Nothing
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  GHC.Base.Just x
                                  -> GHC.Base.Just
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                       (Data.Either.Right
                                          @ Data.Text.Internal.Text
                                          @ Data.Aeson.Types.Internal.Value
                                          x) } } } } } }) -}
4ba7dc8ea454bc96e985c7ecd04fc609
  applyFilterTest74 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest75
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
82fa6a0fe45608d39f039010d1899d02
  applyFilterTest75 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest76) -}
f326bd8af7d86ef2a5b35ac0752741a3
  applyFilterTest76 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest77) -}
47302481a050f75a850f7674cc2b841d
  applyFilterTest77 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest78
                   GHC.Stack.Types.EmptyCallStack) -}
f6447a1bda5e13c3f47821d10e9877e4
  applyFilterTest78 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest81
                   Main.applyFilterTest32
                   Main.applyFilterTest80
                   Main.applyFilterTest79) -}
8bab19b917db09115a62331e02c9fa1e
  applyFilterTest79 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 81#) -}
882f1f1ce9f5ffb6e6309d83c7fa6e1a
  applyFilterTest8 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest35
                   Main.applyFilterTest9) -}
a916c3af959707532bfd340ffc874225
  applyFilterTest80 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 111#) -}
a0b958223c8965a74387ad68ceb8ddbb
  applyFilterTest81 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 110#) -}
d38d24e56ade6bf4c365bb18abfe70df
  applyFilterTest82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 4"#) -}
7bc68263e594adfc3e90dccce7217662
  applyFilterTest83 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest97
                   Main.applyFilterTest84) -}
2788b36549b3407b7f0382ca5f3f8c43
  applyFilterTest84 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest85) -}
6ba22185854665a01a3e04346e8500c9
  applyFilterTest85 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest90
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest89
                   Main.applyFilterTest86) -}
1f8e05face27fe605cee18dc37b53a3c
  applyFilterTest86 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest87) -}
a4acfd96ab6dfec1cf12e9a64fc4bf05
  applyFilterTest87 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest88 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
84393986ddc8ad9dc2821a748b447ea1
  applyFilterTest88 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ".nested-field.inner-string"#) -}
bca05f6213376ff02f71741ce021c9e7
  applyFilterTest89 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "nested-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just v
                        -> case v of wild2 {
                             DEFAULT
                             -> GHC.Base.Nothing
                                  @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             Data.Aeson.Types.Internal.Object o1
                             -> case Data.Text.Show.unpackCString#
                                       "inner-string"# of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                case Main.$w$slookup
                                       @ Data.Aeson.Types.Internal.Value
                                       ww5
                                       ww6
                                       ww7
                                       o1 of wild3 {
                                  GHC.Base.Nothing
                                  -> GHC.Base.Nothing
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  GHC.Base.Just x
                                  -> GHC.Base.Just
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                       (Data.Either.Right
                                          @ Data.Text.Internal.Text
                                          @ Data.Aeson.Types.Internal.Value
                                          x) } } } } } }) -}
0f6606cc7b888725906a5cc2ee798f53
  applyFilterTest9 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest10) -}
1d05f59b3b8a4587e93882b090800dd9
  applyFilterTest90 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest91
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
7de5f30f6ffde2d5e236322fb7c9d75c
  applyFilterTest91 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest92) -}
46087159bd4c2bfceddecc1f8ff3ceb6
  applyFilterTest92 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest93) -}
dd9b759b067949f224f176b899ec8447
  applyFilterTest93 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest94
                   GHC.Stack.Types.EmptyCallStack) -}
29cc53ab44442c37c7eaf54d5b4b033c
  applyFilterTest94 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest96
                   Main.applyFilterTest32
                   Main.applyFilterTest95
                   Main.applyFilterTest79) -}
c5f435c5356ac65afc01160e65415106
  applyFilterTest95 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 108#) -}
8d15732108e044ef58d02abecf8fa120
  applyFilterTest96 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 107#) -}
6d193188eb656cc4f27d5f958f7435fa
  applyFilterTest97 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 3"#) -}
bfa64d167e3454055f4951ff9a27dd43
  applyFilterTest98 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest113
                   Main.applyFilterTest99) -}
8c9c626d393f339a47a320b7a6d4b0bf
  applyFilterTest99 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest100) -}
dee9f4bbad27fcb78fb32fdd71e00f47
  executeQueryTest :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList Main.executeQueryTest1) -}
c704beef68dbdadf27d814ed3c4f3693
  executeQueryTest1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.executeQueryTest39
                   Main.executeQueryTest2) -}
654290bcb669293b0d8edc813ba2d8dd
  executeQueryTest10 :: [Data.Aeson.Types.Internal.Value]
  {- Unfolding: (GHC.Types.:
                   @ Data.Aeson.Types.Internal.Value
                   Main.executeQueryTest13
                   Main.executeQueryTest11) -}
30e64edcaf93b585db5692747282f22f
  executeQueryTest11 :: [Data.Aeson.Types.Internal.Value]
  {- Unfolding: (GHC.Types.:
                   @ Data.Aeson.Types.Internal.Value
                   Main.executeQueryTest12
                   (GHC.Types.[] @ Data.Aeson.Types.Internal.Value)) -}
70935eec6abc702c56b36330d72581da
  executeQueryTest12 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "inner value"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
0dfe9ef1d091eb43c8a06a0cee900f4a
  executeQueryTest13 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        "string value"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
2f764aab13d47f52b6101cb92b507b5a
  executeQueryTest14 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
1338ba4b051d18b61d4f4e902f4c7e1e
  executeQueryTest15 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
          Data.Aeson.Types.Internal.Value,
        GHC.Types.Int)
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             Data.Aeson.Types.Internal.Value,
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><S,U> -}
216326dcd04ae1936f63ba7dd6b6ee0e
  executeQueryTest16 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.executeQueryTest17
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither
                   Main.$s$fShowEither2) -}
d71697417f15ba7ec8daa7a4222d45ae
  executeQueryTest17 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.executeQueryTest18) -}
83732928c8fc0125c34671a240ccfb38
  executeQueryTest18 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.executeQueryTest19) -}
e6256547453b7324cd71f35faf42a21e
  executeQueryTest19 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.executeQueryTest20
                   GHC.Stack.Types.EmptyCallStack) -}
79437d760a0ae5b911de254f12135313
  executeQueryTest2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.executeQueryTest25
                   Main.executeQueryTest3) -}
80b919e1121b87c600226fce9fea4e6d
  executeQueryTest20 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.executeQueryTest23
                   Main.applyFilterTest32
                   Main.executeQueryTest22
                   Main.executeQueryTest21) -}
a021f5d5ba60a0ab22c7ca0a30151562
  executeQueryTest21 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 88#) -}
d63eb1b58c174ff7236fcedc2cafef18
  executeQueryTest22 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 138#) -}
04a3065497252b4c03bc1d33da4a6557
  executeQueryTest23 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 137#) -}
ffb5df9b7b175999c663cacbd7b3b0dd
  executeQueryTest24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "executeQuery test 3"#) -}
db219a695100298df51d1424a8176e66
  executeQueryTest25 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.executeQueryTest38
                   Main.executeQueryTest26) -}
d190738f72f7de886154089cd2fd8b0c
  executeQueryTest26 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.executeQueryTest27) -}
1b00bdcdd7fb6a6324bcef27184b558a
  executeQueryTest27 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.executeQueryTest30
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.executeQueryTest28
                   Data.Hjq.Query.executeQuery1) -}
db9d3893bc1990c4b53ce4dc2957a5bd
  executeQueryTest28 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Aeson.Types.Internal.Value
                   Main.executeQueryTest29) -}
8389a66fef9133a2c0e8ff3444165cd0
  executeQueryTest29 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Main.testData of v2 { DEFAULT ->
                 case Data.Text.Show.unpackCString#
                        "field1"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Main.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        v2
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z { DEFAULT ->
                 case Data.Text.Show.unpackCString#
                        "string value"# of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Data.Text.Show.unpackCString#
                        "field2"# of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case Main.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww5
                        ww6
                        ww7
                        (Data.Aeson.Types.Internal.String dt)
                        z of dt1 { DEFAULT ->
                 Data.Aeson.Types.Internal.Object dt1 } } } } } }) -}
b6516875e914b3850e8cc897f555146f
  executeQueryTest3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.executeQueryTest4
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
27bae54933c1afc9924f572f3851520b
  executeQueryTest30 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.executeQueryTest31
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither
                   Main.$s$fShowEither2) -}
8b3be0b554af87f7af43821c7ade9bb5
  executeQueryTest31 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.executeQueryTest32) -}
0ff481127320325e3fcfab08e98f1887
  executeQueryTest32 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.executeQueryTest33) -}
8f0d4a3b5482bb3c9d636df96a626842
  executeQueryTest33 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.executeQueryTest34
                   GHC.Stack.Types.EmptyCallStack) -}
6c5c250cacab31a17af8a9286a772d28
  executeQueryTest34 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.executeQueryTest37
                   Main.applyFilterTest32
                   Main.executeQueryTest36
                   Main.executeQueryTest35) -}
4eac36d15bad62dad46dfc0181f97bbf
  executeQueryTest35 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 99#) -}
9ea5ed747804d35328b495541353dfc9
  executeQueryTest36 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 135#) -}
00fb8cf563d20e3be589c8e6fd1dae57
  executeQueryTest37 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 134#) -}
5a8cc6f3f26bbc5c70b4012ca1cf7b31
  executeQueryTest38 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "executeQuery test 2"#) -}
35ccef6e9c0949b3c2e2f826eac82382
  executeQueryTest39 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.executeQueryTest52
                   Main.executeQueryTest40) -}
802ca189f2bb7b83d33d8250579f9ac3
  executeQueryTest4 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.executeQueryTest24
                   Main.executeQueryTest5) -}
d034bd50c4aa91c52072762a12c8810b
  executeQueryTest40 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.executeQueryTest41) -}
6710d59ac45d53d89f975a2c88bd2aa0
  executeQueryTest41 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.executeQueryTest44
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.executeQueryTest42
                   Data.Hjq.Query.executeQuery1) -}
7dbe0c0d0b69d484babb085441aed79b
  executeQueryTest42 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Aeson.Types.Internal.Value
                   Main.executeQueryTest43) -}
17ba6afac0ec6729e53bf5acd706085a
  executeQueryTest43 :: Data.Aeson.Types.Internal.Value
  {- HasNoCafRefs,
     Unfolding: (Data.Aeson.Types.Internal.Object
                   (Data.HashMap.Base.Empty
                      @ Data.Text.Internal.Text
                      @ Data.Aeson.Types.Internal.Value)) -}
d24e583213bdc4f4f322420788b615fc
  executeQueryTest44 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.executeQueryTest45
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither
                   Main.$s$fShowEither2) -}
ba8dd3ca818379df6c8899115a9d0ea1
  executeQueryTest45 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.executeQueryTest46) -}
8b3b914779f6960e2b4ed996bdd879aa
  executeQueryTest46 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.executeQueryTest47) -}
2738dae0ae2c1d210ff4986465881fb4
  executeQueryTest47 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.executeQueryTest48
                   GHC.Stack.Types.EmptyCallStack) -}
e6c3607abbec9795af028bff76e4c5ad
  executeQueryTest48 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.executeQueryTest51
                   Main.applyFilterTest32
                   Main.executeQueryTest50
                   Main.executeQueryTest49) -}
b36782708a59ba6ae9ef41bc339d894f
  executeQueryTest49 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 47#) -}
b87a6858f9708a19593f3fceeeb370d6
  executeQueryTest5 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.executeQueryTest6) -}
95bc3020abf56201fc52bc38e8863790
  executeQueryTest50 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 132#) -}
a9261846cd7101c6410cd1295449edd7
  executeQueryTest51 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 131#) -}
a00e6adfd60957a7cfc1a5f42889a334
  executeQueryTest52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "executeQuery test 1"#) -}
5fe220623817915d6bdac1ba0f24d656
  executeQueryTest6 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.executeQueryTest16
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.executeQueryTest7
                   Data.Hjq.Query.executeQuery1) -}
968c180723d548a5191ae304407540b8
  executeQueryTest7 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Aeson.Types.Internal.Value
                   Main.executeQueryTest8) -}
2eea5eda8361f6bc410692f496acfd0f
  executeQueryTest8 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector Data.Aeson.Types.Internal.Value)
                        Main.executeQueryTest9 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.Array dt } }) -}
ee13d71779e7ca1b3ec4bcd382d9276b
  executeQueryTest9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ Data.Aeson.Types.Internal.Value
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        0#
                        (Data.Vector.Mutable.uninitialised
                           @ Data.Aeson.Types.Internal.Value)
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                 case Main.executeQueryTest15
                        GHC.Types.SPEC
                        ((Data.Vector.Mutable.MVector
                            @ (Control.Monad.Primitive.PrimState
                                 (GHC.ST.ST GHC.Prim.RealWorld))
                            @ Data.Aeson.Types.Internal.Value
                            0#
                            0#
                            ipv1)
                           `cast`
                         (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N),
                         Main.executeQueryTest14)
                        Main.executeQueryTest10
                        ipv
                          `cast`
                        (GHC.Prim.State#
                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                 case ipv7 of wild5 { (,) v' n ->
                 case v'
                        `cast`
                      (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                 (GHC.ST.ST
                                                                    GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                 case n of dt5 { GHC.Types.I# dt6 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        @ Data.Aeson.Types.Internal.Value
                        dt2
                        ipv6
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2
                      `cast`
                    (GHC.Prim.State#
                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                            <GHC.Prim.RealWorld>_N))_R,
                    Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      dt
                      dt6
                      ipv3 #) } } } } } }) -}
d1482039d6f2fb04689cfd0cf0c16395
  jqFilterParserSpacesTest :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList
                   Main.jqFilterParserSpacesTest1) -}
f698a7111f4eda5045c426f81b77c57e
  jqFilterParserSpacesTest1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest65
                   Main.jqFilterParserSpacesTest2) -}
e68bceb53802bf8d80b0aa4829477489
  jqFilterParserSpacesTest10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   " . fieldName [ 0 ] "#) -}
76aee290d07236e45d63ae4a74e6b78f
  jqFilterParserSpacesTest11 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqFilter
                   Main.jqFilterParserSpacesTest12) -}
786b424a2496fd7d8253f0f351ad14dd
  jqFilterParserSpacesTest12 :: Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.JqField
                   Main.jqFilterParserSpacesTest14
                   Main.jqFilterParserSpacesTest13) -}
e657f95629d140f9f2ba2c1b8e485640
  jqFilterParserSpacesTest13 :: Data.Hjq.Parser.JqFilter
  {- HasNoCafRefs,
     Unfolding: (Data.Hjq.Parser.JqIndex
                   Main.executeQueryTest14
                   Data.Hjq.Parser.JqNil) -}
47bb17eefc20b56272521e88db33c874
  jqFilterParserSpacesTest14 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "fieldName"#) -}
8317781b0b834473da66ab9038e7d637
  jqFilterParserSpacesTest15 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserSpacesTest16
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
7a4c68688cb90e04708039b674ca4c8e
  jqFilterParserSpacesTest16 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserSpacesTest17) -}
c84948d88a4103aea0758e5b9cd8bd76
  jqFilterParserSpacesTest17 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserSpacesTest18) -}
18d54028fb50a4f72e2bea64f876ce22
  jqFilterParserSpacesTest18 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserSpacesTest19
                   GHC.Stack.Types.EmptyCallStack) -}
e725667343c3fdab79e9e918e9e04a0a
  jqFilterParserSpacesTest19 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.executeQueryTest49
                   Main.jqFilterParserSpacesTest21
                   Main.executeQueryTest49
                   Main.jqFilterParserSpacesTest20) -}
4540cfdadfd394ef36ee0992286d8dfd
  jqFilterParserSpacesTest2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest52
                   Main.jqFilterParserSpacesTest3) -}
8565fd057c5e59ca31885a1defda00b6
  jqFilterParserSpacesTest20 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 130#) -}
b982db5c693122ad031a1478cbc1bdce
  jqFilterParserSpacesTest21 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 44#) -}
cf29cbe2f2bf9ce0e36a3282af884a67
  jqFilterParserSpacesTest22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser spaces test 5"#) -}
66daf4fc353ea4a9981e471e6e843f2c
  jqFilterParserSpacesTest23 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserSpacesTest37
                   Main.jqFilterParserSpacesTest24) -}
ee29ceb9ae21e94c7848bdf5144cc0c7
  jqFilterParserSpacesTest24 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqFilterParserSpacesTest25) -}
cd42424ded39f193e2e1226dbea598dd
  jqFilterParserSpacesTest25 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserSpacesTest31
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest28
                   Main.jqFilterParserSpacesTest26) -}
49bf527c3efd9c91f4ef9058b648247a
  jqFilterParserSpacesTest26 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserSpacesTest27) -}
818a95bcea410fd1e76ddd2a3adbe3ee
  jqFilterParserSpacesTest27 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   " . [ 0 ] . fieldName "#) -}
07171f70454620f1b4e90d2e36f4c8c3
  jqFilterParserSpacesTest28 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqFilter
                   Main.jqFilterParserSpacesTest29) -}
76ec5c53a25898bfc063758f974a8396
  jqFilterParserSpacesTest29 :: Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.JqIndex
                   Main.executeQueryTest14
                   Main.jqFilterParserSpacesTest30) -}
91068c20ee2362723863a487b698f3dd
  jqFilterParserSpacesTest3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest38
                   Main.jqFilterParserSpacesTest4) -}
94714d8f136dba7380234dc1fc5bd973
  jqFilterParserSpacesTest30 :: Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.JqField
                   Main.jqFilterParserSpacesTest14
                   Data.Hjq.Parser.JqNil) -}
6e967b669b6d59c5da0a3876049b3711
  jqFilterParserSpacesTest31 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserSpacesTest32
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
11df4350d3702db11d6d2e137dcbc01b
  jqFilterParserSpacesTest32 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserSpacesTest33) -}
b873325853cdfe7955c776d79a1a1bf6
  jqFilterParserSpacesTest33 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserSpacesTest34) -}
181b95e293f42e8d82961c353eed1c10
  jqFilterParserSpacesTest34 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserSpacesTest35
                   GHC.Stack.Types.EmptyCallStack) -}
e07ec630925b54a9293bd46f968334af
  jqFilterParserSpacesTest35 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserSpacesTest36
                   Main.jqFilterParserSpacesTest21
                   Main.jqFilterParserSpacesTest36
                   Main.executeQueryTest50) -}
dfb0f6d6e75c34544a42ca97737999c4
  jqFilterParserSpacesTest36 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 46#) -}
ac1e72b9b064c8434b80481a93d30551
  jqFilterParserSpacesTest37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser spaces test 4"#) -}
9e16e9434a7ba282a87edbe2aeff320c
  jqFilterParserSpacesTest38 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserSpacesTest51
                   Main.jqFilterParserSpacesTest39) -}
9fdb9193125a8059d9fdddee4fb88b91
  jqFilterParserSpacesTest39 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqFilterParserSpacesTest40) -}
4ed16abae5e0194f649ed2b6908a2e16
  jqFilterParserSpacesTest4 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest23
                   Main.jqFilterParserSpacesTest5) -}
ca60186c9790409a13f05a075de8797f
  jqFilterParserSpacesTest40 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserSpacesTest44
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest43
                   Main.jqFilterParserSpacesTest41) -}
f621a1f73fae26fb5428bc2adab21c70
  jqFilterParserSpacesTest41 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserSpacesTest42) -}
4523fea1e0cbae4a9f0ed9b95d268953
  jqFilterParserSpacesTest42 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# " . fieldName "#) -}
245088aef552364a80fb25c82bebeb42
  jqFilterParserSpacesTest43 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqFilter
                   Main.jqFilterParserSpacesTest30) -}
9b882ad8983e2fef8108c171308d2164
  jqFilterParserSpacesTest44 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserSpacesTest45
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
72d12cead5492c5671c670b7e5284b54
  jqFilterParserSpacesTest45 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserSpacesTest46) -}
246ff3ff120d78e3428d752a793f0470
  jqFilterParserSpacesTest46 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserSpacesTest47) -}
28d09573a5aabcb394d22f6e9a5ecd8d
  jqFilterParserSpacesTest47 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserSpacesTest48
                   GHC.Stack.Types.EmptyCallStack) -}
bda197ea3f08a94a72327e2b20f33f96
  jqFilterParserSpacesTest48 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserSpacesTest50
                   Main.jqFilterParserSpacesTest21
                   Main.jqFilterParserSpacesTest50
                   Main.jqFilterParserSpacesTest49) -}
180d205d063d4fb2b3b29266515750b2
  jqFilterParserSpacesTest49 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 112#) -}
74db951cc7640e2f9bdf4080f77d6a79
  jqFilterParserSpacesTest5 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest6
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
eefdcc5748418f34924a943720e7c469
  jqFilterParserSpacesTest50 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 45#) -}
47ef419088b5b006504971e88beeb7a4
  jqFilterParserSpacesTest51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser spaces test 3"#) -}
7fb4c53e0284039d5b0ef35b6124bccd
  jqFilterParserSpacesTest52 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserSpacesTest64
                   Main.jqFilterParserSpacesTest53) -}
9509efa28f3a4713f654d9f37a585cf9
  jqFilterParserSpacesTest53 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqFilterParserSpacesTest54) -}
9ae0edd472425acff4d7b41126a26399
  jqFilterParserSpacesTest54 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserSpacesTest58
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest57
                   Main.jqFilterParserSpacesTest55) -}
60ea4ae19e0d5a4bdc27f10b6aa46a98
  jqFilterParserSpacesTest55 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserSpacesTest56) -}
a4f1b0c7633596fb431e4c8a24c90b13
  jqFilterParserSpacesTest56 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# " . [ 0 ] "#) -}
b99eca011f3076cb2753e85ddefa54a6
  jqFilterParserSpacesTest57 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqFilter
                   Main.jqFilterParserSpacesTest13) -}
e1a67dd269299f5d10b79d977d431904
  jqFilterParserSpacesTest58 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserSpacesTest59
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
eda2a685d004c98b18273e75ca6f8ddf
  jqFilterParserSpacesTest59 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserSpacesTest60) -}
c89c349d71fb1d2aeecee3f46a41d4c1
  jqFilterParserSpacesTest6 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserSpacesTest22
                   Main.jqFilterParserSpacesTest7) -}
0f19d39451a5164636d962f098d169ab
  jqFilterParserSpacesTest60 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserSpacesTest61) -}
92c35c32735d21c27dc48319620f212f
  jqFilterParserSpacesTest61 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserSpacesTest62
                   GHC.Stack.Types.EmptyCallStack) -}
7c1ed5122baf0b17145698b8222a96af
  jqFilterParserSpacesTest62 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserSpacesTest21
                   Main.jqFilterParserSpacesTest21
                   Main.jqFilterParserSpacesTest21
                   Main.jqFilterParserSpacesTest63) -}
9e321a357cc31e339ba5881f11009e52
  jqFilterParserSpacesTest63 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 98#) -}
ea60aca1ec85ba96c98ee7fc8352355a
  jqFilterParserSpacesTest64 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser spaces test 2"#) -}
6da9add6ebda6a9e3d9416f4091dea8c
  jqFilterParserSpacesTest65 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserSpacesTest78
                   Main.jqFilterParserSpacesTest66) -}
5e780b7ecdad65359ba9658837e0cf62
  jqFilterParserSpacesTest66 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqFilterParserSpacesTest67) -}
e8f1036534373d2a1676be69ecf55be3
  jqFilterParserSpacesTest67 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserSpacesTest71
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest70
                   Main.jqFilterParserSpacesTest68) -}
0e2bc58823516944f03846dfaecbf297
  jqFilterParserSpacesTest68 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserSpacesTest69) -}
8c4df621a1e38faa725479c59ed7bb8d
  jqFilterParserSpacesTest69 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# " . "#) -}
63c61c837f934f1edf9e75998e60bf95
  jqFilterParserSpacesTest7 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqFilterParserSpacesTest8) -}
06f829fa13798c5b09ffeb38bfd84166
  jqFilterParserSpacesTest70 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqFilter
                   Data.Hjq.Parser.JqNil) -}
38ac692f484b59a4a9b287cb4d925107
  jqFilterParserSpacesTest71 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserSpacesTest72
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
741d38a79ccf1ad185ae46ef57e4f4c4
  jqFilterParserSpacesTest72 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserSpacesTest73) -}
2be182e58902e66cbc98f73f63469a5c
  jqFilterParserSpacesTest73 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserSpacesTest74) -}
03152c01685940c29990ee3dcd7f7312
  jqFilterParserSpacesTest74 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserSpacesTest75
                   GHC.Stack.Types.EmptyCallStack) -}
d5c59436738312bfa3f49f40774e4127
  jqFilterParserSpacesTest75 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserSpacesTest77
                   Main.jqFilterParserSpacesTest77
                   Main.jqFilterParserSpacesTest77
                   Main.jqFilterParserSpacesTest76) -}
e6a651924db6d19c7dd81e47920bb50b
  jqFilterParserSpacesTest76 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 79#) -}
f4b71c4ffe57a4edcbbb29441fa89743
  jqFilterParserSpacesTest77 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 43#) -}
57397e68ae7bc471a41838ddbef6c394
  jqFilterParserSpacesTest78 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser spaces test 1"#) -}
55317eda71d30e7884bec8daefe3a71c
  jqFilterParserSpacesTest8 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserSpacesTest15
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest11
                   Main.jqFilterParserSpacesTest9) -}
ba51d01ebec4e58fea4656a94424b80f
  jqFilterParserSpacesTest9 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserSpacesTest10) -}
40f72994814851b1d864f2797794ee38
  jqFilterParserTest :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList Main.jqFilterParserTest1) -}
8d710391b85bc708eee5ed075079ee9b
  jqFilterParserTest1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest56
                   Main.jqFilterParserTest2) -}
356f04e123a75af13355d94eaca25e94
  jqFilterParserTest10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".fieldName[0]"#) -}
0d5fbce790bb7cb0a1d5afd78afa2ad0
  jqFilterParserTest11 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserTest12
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
b7fba67d1a4439c5b6e7a442b211bb65
  jqFilterParserTest12 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserTest13) -}
8be6b40c439d85a76ec9f93a1c043ab1
  jqFilterParserTest13 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserTest14) -}
6a93d79a60d6099555d047ebdadc9152
  jqFilterParserTest14 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserTest15
                   GHC.Stack.Types.EmptyCallStack) -}
d0670b1aeaafa8b4bd8795bf59cf70f8
  jqFilterParserTest15 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserTest17
                   Main.jqFilterParserTest16
                   Main.jqFilterParserTest17
                   Main.applyFilterTest49) -}
084b945b4f9e35cdff010ac23c7b8662
  jqFilterParserTest16 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 37#) -}
68d993f4a6d17b5de2e72d5342870129
  jqFilterParserTest17 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 36#) -}
12eb599870214966b243f79df045936b
  jqFilterParserTest18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser test 5"#) -}
16731c5019dc02d8f3b9119e6bdc3b67
  jqFilterParserTest19 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserTest31
                   Main.jqFilterParserTest20) -}
1ac2ec484c401522001dd5a5b87d678f
  jqFilterParserTest2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest44
                   Main.jqFilterParserTest3) -}
e9af9dd8b7846fe98f7402e1df40a99b
  jqFilterParserTest20 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqFilterParserTest21) -}
48965ef61cb41dc89cdb7b74219fb931
  jqFilterParserTest21 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserTest24
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest28
                   Main.jqFilterParserTest22) -}
dc7b9f60094aeca63e0665c3c77aef4a
  jqFilterParserTest22 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserTest23) -}
a4d6a7246b43e477abe6f23aa72206f0
  jqFilterParserTest23 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".[0].fieldName"#) -}
122070b20bd642ff07955ad6a6c0b94c
  jqFilterParserTest24 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserTest25
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
ab0d674df30a0b0299600a0671db418b
  jqFilterParserTest25 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserTest26) -}
ace8f2d46c6bfc6eb0332197afb8e3f4
  jqFilterParserTest26 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserTest27) -}
960caf8f4f78c889dd914dd51c9c9449
  jqFilterParserTest27 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserTest28
                   GHC.Stack.Types.EmptyCallStack) -}
4a880eae674a61757db7fc47bc342170
  jqFilterParserTest28 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserTest30
                   Main.jqFilterParserTest16
                   Main.jqFilterParserTest30
                   Main.jqFilterParserTest29) -}
8d739147e6abd212e1f557227785f2c7
  jqFilterParserTest29 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 118#) -}
7d0ea788702fa9b99e742c3430dd8a94
  jqFilterParserTest3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest32
                   Main.jqFilterParserTest4) -}
f1ae19cdc8eac68fa7b6291a46aa9007
  jqFilterParserTest30 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 35#) -}
ac41094175997517a3dda65aa0678940
  jqFilterParserTest31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser test 4"#) -}
f698dc4baca1eb0083c3ded5de36ee04
  jqFilterParserTest32 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserTest43
                   Main.jqFilterParserTest33) -}
2fbc7f4889e19d71813fc93b6cea6354
  jqFilterParserTest33 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqFilterParserTest34) -}
e5a980eec197884d32d25df47b1fcd64
  jqFilterParserTest34 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserTest37
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest43
                   Main.jqFilterParserTest35) -}
aa348e4dc904363b815a1321d469dd61
  jqFilterParserTest35 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserTest36) -}
84504134c953f2f239271dab963b3d41
  jqFilterParserTest36 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".fieldName"#) -}
052a031d0be43462c652020abf85ccbf
  jqFilterParserTest37 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserTest38
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
3535b22f1f6531e4f674c2adc1d690d5
  jqFilterParserTest38 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserTest39) -}
27e90d8cd16428717d3e728b7e53f6ca
  jqFilterParserTest39 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserTest40) -}
3ac7585183c166185f1ac255fe5438d6
  jqFilterParserTest4 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest19
                   Main.jqFilterParserTest5) -}
1c6f95c31f58968ee18b4b3e719da6e9
  jqFilterParserTest40 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserTest41
                   GHC.Stack.Types.EmptyCallStack) -}
323cd847f9bb761d294af7b8614f5661
  jqFilterParserTest41 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserTest42
                   Main.jqFilterParserTest16
                   Main.jqFilterParserTest42
                   Main.applyFilterTest128) -}
8299a972377ae2e61ded7b512eedb6ee
  jqFilterParserTest42 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 34#) -}
8d2139055341727a8877611c8ad8a18a
  jqFilterParserTest43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser test 3"#) -}
18b6c45e332e4284a7025a5613e3f5b4
  jqFilterParserTest44 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserTest55
                   Main.jqFilterParserTest45) -}
1a0e83c981a0dca99faa63908add3744
  jqFilterParserTest45 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqFilterParserTest46) -}
dea27b499c70663025811eaebda539b1
  jqFilterParserTest46 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserTest49
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest57
                   Main.jqFilterParserTest47) -}
2b8794f744eb2a377d21a5330d5785b6
  jqFilterParserTest47 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserTest48) -}
9882f27ea8e1b69ab71bda767d5ad807
  jqFilterParserTest48 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".[0]"#) -}
7e196df6f34115ecb018357e90282b3d
  jqFilterParserTest49 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserTest50
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
4612eb7cd7b0fd62f47497cdce91ed26
  jqFilterParserTest5 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest6
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
7efe1eab12cb907b980ce6074f23d9cb
  jqFilterParserTest50 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserTest51) -}
9659be9e791b9900fb1c3ca3b0b70769
  jqFilterParserTest51 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserTest52) -}
01dc6bfc19cc8d6468938b7bc48d8ee1
  jqFilterParserTest52 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserTest53
                   GHC.Stack.Types.EmptyCallStack) -}
8e2e75d932a3c4fd5db765ca86793eab
  jqFilterParserTest53 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest127
                   Main.jqFilterParserTest16
                   Main.applyFilterTest127
                   Main.jqFilterParserTest54) -}
26c474d13eb10a41602c203b11d579bd
  jqFilterParserTest54 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 86#) -}
4ed9366260320561dba1ede1ebf9348b
  jqFilterParserTest55 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser test 2"#) -}
dca0cebaa57d8898fcdac04055547faf
  jqFilterParserTest56 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserTest66
                   Main.jqFilterParserTest57) -}
e4f74ba8a9e145eff474f9e3d0575995
  jqFilterParserTest57 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqFilterParserTest58) -}
7d5955ff5b800daa41c0f482ed4caae8
  jqFilterParserTest58 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserTest59
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest70
                   Main.applyFilterTest118) -}
a63ddd17486b500841a97f72e312cfc3
  jqFilterParserTest59 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserTest60
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
b58e859887fe3ee70f013f8766f1e374
  jqFilterParserTest6 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserTest18
                   Main.jqFilterParserTest7) -}
4a0057ed1420c215f1d12fef61a85046
  jqFilterParserTest60 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserTest61) -}
682ec4b2107d28b882e76404ef667f8b
  jqFilterParserTest61 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserTest62) -}
9557916af526c4d04542f2d87f85abf5
  jqFilterParserTest62 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserTest63
                   GHC.Stack.Types.EmptyCallStack) -}
f53f7e619b37ef165162c2f3526e049e
  jqFilterParserTest63 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserTest65
                   Main.jqFilterParserTest17
                   Main.jqFilterParserTest65
                   Main.jqFilterParserTest64) -}
87bdd52ce42497ceff5c6479d3561400
  jqFilterParserTest64 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 70#) -}
c1ff44c2e303bff57110d5e83d85c4a8
  jqFilterParserTest65 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 32#) -}
d55ae098b107e9f640ad9c44ace9109c
  jqFilterParserTest66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser test 1"#) -}
48a630c2c4d7be4aa35aaba2ed90e2bb
  jqFilterParserTest7 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqFilterParserTest8) -}
4ee062164fdcccc8c8bbfeeb560a0797
  jqFilterParserTest8 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserTest11
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest11
                   Main.jqFilterParserTest9) -}
2f4db3f03783bc7d82b8d21d9cf4be32
  jqFilterParserTest9 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserTest10) -}
82559e8fa2da46af4176bd20ee2e7f32
  jqQueryParserSpacesTest :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList
                   Main.jqQueryParserSpacesTest1) -}
ed4dfec790c6abf79ca97ccef3d79b4d
  jqQueryParserSpacesTest1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserSpacesTest48
                   Main.jqQueryParserSpacesTest2) -}
85ddd07eeb54825ab34ff4b789c97e83
  jqQueryParserSpacesTest10 :: Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.JqQueryObject
                   Main.jqQueryParserSpacesTest11) -}
ede7c352c0d9a76a15755757adcd49bf
  jqQueryParserSpacesTest11 ::
    [(Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserSpacesTest16
                   Main.jqQueryParserSpacesTest12) -}
bb60ced024d933837ce6b6468078a38f
  jqQueryParserSpacesTest12 ::
    [(Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserSpacesTest13
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery))) -}
5147ed7c319bd301d8dcfce6549c00a7
  jqQueryParserSpacesTest13 ::
    (Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)
  {- Unfolding: ((Main.jqQueryParserSpacesTest15,
                  Main.jqQueryParserSpacesTest14)) -}
857d87dfa500e6d00591dbab5222c046
  jqQueryParserSpacesTest14 :: Data.Hjq.Parser.JqQuery
  {- HasNoCafRefs,
     Unfolding: (Data.Hjq.Parser.JqQueryArray
                   (GHC.Types.[] @ Data.Hjq.Parser.JqQuery)) -}
06e14ea3eb93e8dd409a71ec72d8dff9
  jqQueryParserSpacesTest15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "piyo"#) -}
817ae89c0ea31f3fa5d2fc70eecb05da
  jqQueryParserSpacesTest16 ::
    (Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)
  {- Unfolding: ((Main.jqQueryParserSpacesTest17,
                  Main.jqQueryParserSpacesTest14)) -}
843947b76de91ff930dfe2bbdb903fe1
  jqQueryParserSpacesTest17 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "hoge"#) -}
d53cef50be9b3165c0e6f40b5050b130
  jqQueryParserSpacesTest18 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserSpacesTest19
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
9e1d501f92337df9ecac3b769966392a
  jqQueryParserSpacesTest19 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserSpacesTest20) -}
246f8dd1cebb76091ad6af93530e9ea0
  jqQueryParserSpacesTest2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserSpacesTest27
                   Main.jqQueryParserSpacesTest3) -}
c598dce27a75ab19bcf6bcd4178d545f
  jqQueryParserSpacesTest20 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserSpacesTest21) -}
b21d39b86d0ed1cdc24be15536a8967b
  jqQueryParserSpacesTest21 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserSpacesTest22
                   GHC.Stack.Types.EmptyCallStack) -}
91e3133fb515194fcb3b5d1847492d16
  jqQueryParserSpacesTest22 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest48
                   Main.jqQueryParserSpacesTest25
                   Main.jqQueryParserSpacesTest24
                   Main.jqQueryParserSpacesTest23) -}
44e24aab3886ff0ecea32a53f77a5285
  jqQueryParserSpacesTest23 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 87#) -}
6720c206d726e33488f186a785f104a3
  jqQueryParserSpacesTest24 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 68#) -}
0681e22e74b2173ac7723eeaaa841cbb
  jqQueryParserSpacesTest25 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 41#) -}
859d39df3991226eaf05c4910e174b36
  jqQueryParserSpacesTest26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQuerySpacesParser test 3"#) -}
095e31342eb15ca7320abeb78fcb1e9d
  jqQueryParserSpacesTest27 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserSpacesTest47
                   Main.jqQueryParserSpacesTest28) -}
2dfb2d6cd22458d21bb1718a8d97fb96
  jqQueryParserSpacesTest28 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqQueryParserSpacesTest29) -}
030ce103fb7cb1a6b710bbdaf063b006
  jqQueryParserSpacesTest29 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserSpacesTest40
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest32
                   Main.jqQueryParserSpacesTest30) -}
062f7e93c32caa0849cdd631ab681f4b
  jqQueryParserSpacesTest3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserSpacesTest4
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
aaab7389f84c62df54f03f60dd02ed9b
  jqQueryParserSpacesTest30 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserSpacesTest31) -}
8dec8e9d26691ce1f636b21ab076333f
  jqQueryParserSpacesTest31 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   " [  . hoge  ,  .  piyo ] "#) -}
37c5109af96fa7c99f0d003dd7d26464
  jqQueryParserSpacesTest32 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqQuery
                   Main.jqQueryParserSpacesTest33) -}
4252b60ee5c8b49dde4e65651da0a9e3
  jqQueryParserSpacesTest33 :: Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.JqQueryArray
                   Main.jqQueryParserSpacesTest34) -}
2a72cb9fe9eab9bf5717b5fe20d76048
  jqQueryParserSpacesTest34 :: [Data.Hjq.Parser.JqQuery]
  {- Unfolding: (GHC.Types.:
                   @ Data.Hjq.Parser.JqQuery
                   Main.jqQueryParserSpacesTest38
                   Main.jqQueryParserSpacesTest35) -}
3c2eb82028593ee18932d664f008e30c
  jqQueryParserSpacesTest35 :: [Data.Hjq.Parser.JqQuery]
  {- Unfolding: (GHC.Types.:
                   @ Data.Hjq.Parser.JqQuery
                   Main.jqQueryParserSpacesTest36
                   (GHC.Types.[] @ Data.Hjq.Parser.JqQuery)) -}
90d5b54f327f9c3313dabee778a08d75
  jqQueryParserSpacesTest36 :: Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.JqQueryFilter
                   Main.jqQueryParserSpacesTest37) -}
c48c8ead4208051a0742c3c7994c50a5
  jqQueryParserSpacesTest37 :: Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.JqField
                   Main.jqQueryParserSpacesTest15
                   Data.Hjq.Parser.JqNil) -}
73988deb97bb1033139ee3876e17e757
  jqQueryParserSpacesTest38 :: Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.JqQueryFilter
                   Main.jqQueryParserSpacesTest39) -}
665414fdcf5d7b81526cfd67dabb3522
  jqQueryParserSpacesTest39 :: Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.JqField
                   Main.jqQueryParserSpacesTest17
                   Data.Hjq.Parser.JqNil) -}
c7d472d1780706fadd37d02d3587d011
  jqQueryParserSpacesTest4 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserSpacesTest26
                   Main.jqQueryParserSpacesTest5) -}
51a69d5cac7597ad257c713ed6872054
  jqQueryParserSpacesTest40 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserSpacesTest41
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
3c2a7cdd328a693d1b808c925a302307
  jqQueryParserSpacesTest41 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserSpacesTest42) -}
c466828057bb855f99e0fe02ef116cc4
  jqQueryParserSpacesTest42 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserSpacesTest43) -}
e4f4c302773ef6a6e10827266c63b339
  jqQueryParserSpacesTest43 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserSpacesTest44
                   GHC.Stack.Types.EmptyCallStack) -}
c57e5e14535046756d701ac08effd396
  jqQueryParserSpacesTest44 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqQueryParserSpacesTest46
                   Main.jqQueryParserSpacesTest25
                   Main.jqQueryParserSpacesTest45
                   Main.applyFilterTest96) -}
0d7347ace543c7f62fe675de68031b13
  jqQueryParserSpacesTest45 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 66#) -}
00a76bf670a9aa7f3f269d59d886a19e
  jqQueryParserSpacesTest46 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 65#) -}
9f4033a4496016a028877be6b19bd58a
  jqQueryParserSpacesTest47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQuerySpacesParser test 2"#) -}
0048788654ac9538bbf8c026e57234f1
  jqQueryParserSpacesTest48 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserSpacesTest61
                   Main.jqQueryParserSpacesTest49) -}
800f125961b1749c3f3a4f030e232c5e
  jqQueryParserSpacesTest49 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqQueryParserSpacesTest50) -}
152fa5e8ffa2a32c31c6e86001175358
  jqQueryParserSpacesTest5 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqQueryParserSpacesTest6) -}
0258721f7af2fc9aaf6991e2779a57cf
  jqQueryParserSpacesTest50 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserSpacesTest54
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest53
                   Main.jqQueryParserSpacesTest51) -}
ca1fa4c2338be7ed9a509e00e2ad82ad
  jqQueryParserSpacesTest51 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserSpacesTest52) -}
6f6516dc2f6b3b8af194c49a892f9ec6
  jqQueryParserSpacesTest52 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "  [  ]  "#) -}
ca1b27ce45c2f0e2342b3015dda60c46
  jqQueryParserSpacesTest53 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqQuery
                   Main.jqQueryParserSpacesTest14) -}
d5201b432c9a3a2f224f1aea9bc860ae
  jqQueryParserSpacesTest54 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserSpacesTest55
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
5744c44a569722cbbd5045669dd7efcf
  jqQueryParserSpacesTest55 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserSpacesTest56) -}
c1d40af1595cd7714f216200c1766eff
  jqQueryParserSpacesTest56 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserSpacesTest57) -}
03f3479c5488e5113e4d119b81406e61
  jqQueryParserSpacesTest57 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserSpacesTest58
                   GHC.Stack.Types.EmptyCallStack) -}
adb5395efc5531bf7b4bb6a61eabd671
  jqQueryParserSpacesTest58 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqQueryParserSpacesTest60
                   Main.jqQueryParserSpacesTest25
                   Main.jqQueryParserSpacesTest60
                   Main.jqQueryParserSpacesTest59) -}
c1c4c1d738bc69616ba0448051ebe45c
  jqQueryParserSpacesTest59 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 92#) -}
e94a879915b0e32279aba9c4ec8cc719
  jqQueryParserSpacesTest6 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserSpacesTest18
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest9
                   Main.jqQueryParserSpacesTest7) -}
25a8588f25e730f0143fa2aa429b00c9
  jqQueryParserSpacesTest60 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 64#) -}
9f85431b9be92f3a1dab0ae15440ccfa
  jqQueryParserSpacesTest61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQuerySpacesParser test 1"#) -}
c6edce8a1cdaf33038fc81ee932c0336
  jqQueryParserSpacesTest7 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserSpacesTest8) -}
afca8a1a57ae67d4ac638642fdc89119
  jqQueryParserSpacesTest8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   " {   \"  hoge  \"  : [   ]  , \" piyo \" : [ ] } "#) -}
da19d7a0c6128069e2fdba2ba376f48a
  jqQueryParserSpacesTest9 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqQuery
                   Main.jqQueryParserSpacesTest10) -}
6bbac852dcee31af7a01564acf498bae
  jqQueryParserTest :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList Main.jqQueryParserTest1) -}
c63e1c84d38d451e09f09258c4bdda5e
  jqQueryParserTest1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserTest30
                   Main.jqQueryParserTest2) -}
57506c51e773151a874d89649bf20d49
  jqQueryParserTest10 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserTest11) -}
84fee884742cd0fc5e6ba34d36c79220
  jqQueryParserTest11 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserTest12) -}
d11425fb33f019ba7c7f4db9cdc5adf8
  jqQueryParserTest12 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserTest13
                   GHC.Stack.Types.EmptyCallStack) -}
0f033aa6a85ce09aebc103d95672890e
  jqQueryParserTest13 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqQueryParserTest15
                   Main.jqFilterParserTest30
                   Main.jqQueryParserTest14
                   Main.jqQueryParserSpacesTest23) -}
cc4bc7ba8aaddcf9416f9e28dcfae90a
  jqQueryParserTest14 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 58#) -}
69383d93880a4e2a49f43dc446c423b2
  jqQueryParserTest15 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 57#) -}
86491c7679b9f16963097303f5feb103
  jqQueryParserTest16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQueryParser test 3"#) -}
3b88b9674506804606eabea6e2ed3c03
  jqQueryParserTest17 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserTest29
                   Main.jqQueryParserTest18) -}
e2f431f2b737aa0da5038e26c0a57184
  jqQueryParserTest18 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqQueryParserTest19) -}
2e38b30aed8e00be552f80be3ec90993
  jqQueryParserTest19 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserTest22
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest32
                   Main.jqQueryParserTest20) -}
5024f4fec2a920cb48fccadc7084fa3e
  jqQueryParserTest2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserTest17
                   Main.jqQueryParserTest3) -}
df1eea5c6fb1f653de1b57c487efd0f7
  jqQueryParserTest20 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserTest21) -}
269956c5672dc16a42de603316902e6e
  jqQueryParserTest21 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "[.hoge,.piyo]"#) -}
b4c5053b1c88b019ef85efdcfea3c579
  jqQueryParserTest22 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserTest23
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
ce7472a7c4e41dbccf0eb145626219c9
  jqQueryParserTest23 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserTest24) -}
ec2ef0cdb86cfe498eda8971ea394e79
  jqQueryParserTest24 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserTest25) -}
cc44e633b71ab7f993a8cbf1d95e5428
  jqQueryParserTest25 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserTest26
                   GHC.Stack.Types.EmptyCallStack) -}
c86d595929538b9374d5da6c894b40dc
  jqQueryParserTest26 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqQueryParserTest28
                   Main.jqFilterParserTest30
                   Main.jqQueryParserTest27
                   Main.applyFilterTest96) -}
9c533993bab67e7c978db16d2ba9bcce
  jqQueryParserTest27 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 56#) -}
d90ed7b9ba81000c95790741711558d1
  jqQueryParserTest28 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 55#) -}
bd464ce4ab750d0fb589cddc02ed8403
  jqQueryParserTest29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQueryParser test 2"#) -}
36e4e0129d1955ea038fa48c78bd0b96
  jqQueryParserTest3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserTest4
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
cc57b9d2ab105a0a8cb0f68dc014cf9a
  jqQueryParserTest30 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserTest42
                   Main.jqQueryParserTest31) -}
5a5aac141189adf631c830605e3bae25
  jqQueryParserTest31 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqQueryParserTest32) -}
bdce5fa7bfd979ec8c236e8b7aea74f7
  jqQueryParserTest32 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserTest35
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest53
                   Main.jqQueryParserTest33) -}
2e0751631cf839f6c7fc901129aea3a9
  jqQueryParserTest33 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserTest34) -}
b9a650ce36e6b4252615d3085c36977a
  jqQueryParserTest34 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "[]"#) -}
8d574efefbbc0694c2467f933be55136
  jqQueryParserTest35 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserTest36
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
543f46fac4b3f94974bc2ac0b7f44ca9
  jqQueryParserTest36 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserTest37) -}
7ce92b1c3638a89a2c59e588ad4595fc
  jqQueryParserTest37 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserTest38) -}
5e2290c68008b55a46a0ed8e05e547e8
  jqQueryParserTest38 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserTest39
                   GHC.Stack.Types.EmptyCallStack) -}
b5888df1a1407874f60bd48afb0970e4
  jqQueryParserTest39 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqQueryParserTest41
                   Main.jqFilterParserTest30
                   Main.jqQueryParserTest41
                   Main.jqQueryParserTest40) -}
adb9b65bfa42c903b6979f579a79ba2e
  jqQueryParserTest4 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserTest16
                   Main.jqQueryParserTest5) -}
1fd3b187647502b9a1c21cc5a87faa16
  jqQueryParserTest40 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 80#) -}
8e1a30503ad948ab4a01634d163e6dd7
  jqQueryParserTest41 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 54#) -}
dae68d733b1b9a00499036ffe7521458
  jqQueryParserTest42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQueryParser test 1"#) -}
dcf05770de1fa017e954d2b85783397d
  jqQueryParserTest5 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqQueryParserTest6) -}
d6cad0775a69dffffae7ee25be0bf23b
  jqQueryParserTest6 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserTest9
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest9
                   Main.jqQueryParserTest7) -}
7aeffaafc9058bb51fefcc2cb7b922a7
  jqQueryParserTest7 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserTest8) -}
ffd93e9df3a128a01753ad48f31e6a04
  jqQueryParserTest8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "{\"hoge\":[],\"piyo\":[]}"#) -}
e56eb4d3b2b3dc441b600e078f420ad6
  jqQueryParserTest9 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserTest10
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
c25a3cae21d7d76d7cffc42a14e66363
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
cc27c5fdaa77a9b877b2b1c4837ecf67
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.HUnit.Text.runTestTT3 of ww { Test.HUnit.Text.PutText ww1 ww2 ->
                 case Test.HUnit.Text.$wrunTestText
                        @ GHC.Types.Int
                        ww1
                        ww2
                        Main.main4
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) counts' ds ->
                 case ds of wild1 { GHC.Types.I# ds2 ->
                 case ds2 of ds3 {
                   DEFAULT
                   -> case GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ Test.HUnit.Base.Counts
                             Main.main2
                             ipv
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   0# -> (# ipv, GHC.Tuple.() #) } } } } }) -}
561e706724b3a6b1bf8a7aa7cfa770ca
  main10 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.executeQueryTest
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
d790387b8ef48cf9ca083d5062a288d6
  main11 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
ae3e872adfdcf027a2673d2ce525553f
  main2 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionIOException_$ctoException
                   Main.main3) -}
f6cff754cc6dc1f89e02c82b78ac6058
  main3 :: GHC.IO.Exception.IOException
  {- Unfolding: (GHC.IO.Exception.IOError
                   (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                   GHC.IO.Exception.UserError
                   (GHC.Types.[] @ GHC.Types.Char)
                   Test.HUnit.Text.runTestTT2
                   (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
0f1c4a8524808e6f48e4ca0a7b37ef7f
  main4 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestList Main.main5) -}
d1f209cdd66b753497744c3320b3dd51
  main5 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest
                   Main.main6) -}
30143f1afc2fa412eb9b4dc6058a49fd
  main6 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest
                   Main.main7) -}
be2de5bcfa4c7f4e1885b0af405c3a76
  main7 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserTest
                   Main.main8) -}
9113feec3e76871a7af872fee3df3199
  main8 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserSpacesTest
                   Main.main9) -}
7ea2753c19977f4f451f67c79de82005
  main9 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest
                   Main.main10) -}
b2249e5fdf5bfe5b3beca35dda29e7d9
  testData :: Data.Aeson.Types.Internal.Value
61bd4603fe05aafc35b1de02f26e23a6
  unsafeParseQuery ::
    Data.Text.Internal.Text -> Data.Hjq.Parser.JqQuery
  {- Arity: 1, Strictness: <B,A>x,
     Unfolding: InlineRule (1, True, True)
                (\ (t :: Data.Text.Internal.Text) -> Main.unsafeParseQuery1) -}
c4625736adffdb91edd3cc0a607e9b39
  unsafeParseQuery1 :: Data.Hjq.Parser.JqQuery
  {- Strictness: x -}
bacac3a3484cf6cc4b80068d80c09f4d
  unsafeParserFilter ::
    Data.Text.Internal.Text -> Data.Hjq.Parser.JqFilter
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ (t :: Data.Text.Internal.Text) ->
                 case Data.Hjq.Parser.parserJqFilter t of wild {
                   Data.Either.Left s -> Main.unsafeParserFilter1 s
                   Data.Either.Right f -> f }) -}
a5e1920503a92337060707c886e3d5d9
  unsafeParserFilter1 ::
    Data.Text.Internal.Text -> Data.Hjq.Parser.JqFilter
  {- Arity: 1, Strictness: <L,U>x -}
"SPEC/Main $fEqEither @ Text @ JqFilter" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                     Data.Text.Internal.Text)
                                                         ($dEq :: GHC.Classes.Eq
                                                                    Data.Hjq.Parser.JqFilter)
  Data.Either.$fEqEither @ Data.Text.Internal.Text
                         @ Data.Hjq.Parser.JqFilter
                         $dEq
                         $dEq1
  = Main.$s$fEqEither2
"SPEC/Main $fEqEither @ Text @ JqQuery" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                    Data.Text.Internal.Text)
                                                        ($dEq :: GHC.Classes.Eq
                                                                   Data.Hjq.Parser.JqQuery)
  Data.Either.$fEqEither @ Data.Text.Internal.Text
                         @ Data.Hjq.Parser.JqQuery
                         $dEq
                         $dEq1
  = Main.$s$fEqEither1
"SPEC/Main $fEqEither @ Text @ Value" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                  Data.Text.Internal.Text)
                                                      ($dEq :: GHC.Classes.Eq
                                                                 Data.Aeson.Types.Internal.Value)
  Data.Either.$fEqEither @ Data.Text.Internal.Text
                         @ Data.Aeson.Types.Internal.Value
                         $dEq
                         $dEq1
  = Main.$s$fEqEither
"SPEC/Main $fEqMaybe @ (Either Text Value)" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                       (Data.Either.Either
                                                                          Data.Text.Internal.Text
                                                                          Data.Aeson.Types.Internal.Value))
  GHC.Base.$fEqMaybe @ (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                     $dEq
  = Main.$s$fEqMaybe
"SPEC/Main $fShowEither @ Text @ JqFilter" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                         Data.Text.Internal.Text)
                                                           ($dShow :: GHC.Show.Show
                                                                        Data.Hjq.Parser.JqFilter)
  Data.Either.$fShowEither @ Data.Text.Internal.Text
                           @ Data.Hjq.Parser.JqFilter
                           $dShow
                           $dShow1
  = Main.$s$fShowEither1
"SPEC/Main $fShowEither @ Text @ JqQuery" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                        Data.Text.Internal.Text)
                                                          ($dShow :: GHC.Show.Show
                                                                       Data.Hjq.Parser.JqQuery)
  Data.Either.$fShowEither @ Data.Text.Internal.Text
                           @ Data.Hjq.Parser.JqQuery
                           $dShow
                           $dShow1
  = Main.$s$fShowEither
"SPEC/Main $fShowEither @ Text @ Value" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                      Data.Text.Internal.Text)
                                                        ($dShow :: GHC.Show.Show
                                                                     Data.Aeson.Types.Internal.Value)
  Data.Either.$fShowEither @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value
                           $dShow
                           $dShow1
  = Main.$s$fShowEither2
"SPEC/Main $fShowEither_$cshowList @ Text @ JqFilter" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                    Data.Text.Internal.Text)
                                                                      ($dShow :: GHC.Show.Show
                                                                                   Data.Hjq.Parser.JqFilter)
  Data.Either.$fShowEither_$cshowList @ Data.Text.Internal.Text
                                      @ Data.Hjq.Parser.JqFilter
                                      $dShow
                                      $dShow1
  = Main.$s$fShowEither_$s$fShowEither_$cshowList1
"SPEC/Main $fShowEither_$cshowList @ Text @ JqQuery" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                   Data.Text.Internal.Text)
                                                                     ($dShow :: GHC.Show.Show
                                                                                  Data.Hjq.Parser.JqQuery)
  Data.Either.$fShowEither_$cshowList @ Data.Text.Internal.Text
                                      @ Data.Hjq.Parser.JqQuery
                                      $dShow
                                      $dShow1
  = Main.$s$fShowEither_$s$fShowEither_$cshowList
"SPEC/Main $fShowEither_$cshowList @ Text @ Value" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                 Data.Text.Internal.Text)
                                                                   ($dShow :: GHC.Show.Show
                                                                                Data.Aeson.Types.Internal.Value)
  Data.Either.$fShowEither_$cshowList @ Data.Text.Internal.Text
                                      @ Data.Aeson.Types.Internal.Value
                                      $dShow
                                      $dShow1
  = Main.$s$fShowEither_$s$fShowEither_$cshowList2
"SPEC/Main $fShowMaybe @ (Either Text Value)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                           (Data.Either.Either
                                                                              Data.Text.Internal.Text
                                                                              Data.Aeson.Types.Internal.Value))
  GHC.Show.$fShowMaybe @ (Data.Either.Either
                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                       $dShow
  = Main.$s$fShowMaybe
"SPEC/Main $fShowMaybe_$cshowList @ (Either Text Value)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                      (Data.Either.Either
                                                                                         Data.Text.Internal.Text
                                                                                         Data.Aeson.Types.Internal.Value))
  GHC.Show.$fShowMaybe_$cshowList @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  $dShow
  = Main.$s$fShowMaybe_$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

