
==================== FINAL INTERFACE ====================
2017-12-06 10:31:41.6000725 UTC

interface main@main:Main 8002
  interface hash: 93d05e7acffc5bcfef02a13bb8b3cdd2
  ABI hash: f6058b3f9190b42fff5e98154b078f05
  export-list hash: 89a03a10e6a280582272445e9b0be46b
  orphan hash: 5b37d36156301c36e291ef90d389bec6
  flag hash: 13db57ddb479d0258e99f007b904488e
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.applyFilterTest
  Main.jqFilterParserSpacesTest
  Main.jqFilterParserTest
  Main.jqQueryParserSpacesTest
  Main.jqQueryParserTest
  Main.main
  Main.testData
  Main.unsafeParserFilter
module dependencies:
package dependencies: HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI
                      StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      Win32-2.3.1.1@Win32-2.3.1.1
                      adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp
                      aeson-1.1.2.0@aeson-1.1.2.0-IYYaF432Hu8HQKp7no3ap1
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-m1TEyTenyr5nJN40TpHVj
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      call-stack-0.1.0@call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
                      comonad-5.0.2@comonad-5.0.2-Fq9Xy9jdx6uIyJZn00E6Yc
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-29zF0Im431177ovfbHYCGv
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.3@distributive-0.5.3-IX4kyVcHAyoH4uFYrsjY1R
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      free-4.12.4@free-4.12.4-C2gBQV0m8J42HxqSLTFyVx
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      hjq-0.1.0.0@hjq-0.1.0.0-LRLqA3DxDyN3IXZOx6e6qQ integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX
                      lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW
                      lens-aeson-1.0.2@lens-aeson-1.0.2-43qoalhLTu915Xc2si0fma
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      scientific-0.3.5.2@scientific-0.3.5.2-FM2NdrNTcdbCDq9wuNnhIA
                      semigroupoids-5.2.1@semigroupoids-5.2.1-Db8txM8kTsI6Y49CY6g5Jn
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         lens-aeson-1.0.2@lens-aeson-1.0.2-43qoalhLTu915Xc2si0fma:Data.Aeson.Lens
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp:Data.Functor.Rep
                         attoparsec-0.13.1.0@attoparsec-0.13.1.0-3ql4hcH9pGfBAlE21oqFTQ:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Fix
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Day
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Yoneda
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.At
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Internal.Indexed
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Reified
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Tuple
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Wrapped
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Zoom
                         lens-aeson-1.0.2@lens-aeson-1.0.2-43qoalhLTu915Xc2si0fma:Data.Aeson.Lens
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI:Test.HUnit 430ab81af3668b12bae4950025858f90
import  -/  HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI:Test.HUnit.Base f0a9278b48574d2c877b887c21718635
import  -/  HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI:Test.HUnit.Text 6753931dd2c8c4d539d7452dc50c9749
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-IYYaF432Hu8HQKp7no3ap1:Data.Aeson 2c2ea416ea3f3f7ead4fbc7d22c60646
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-IYYaF432Hu8HQKp7no3ap1:Data.Aeson.Types.Internal c2b7e48c55f4f3192a35e330eb07e54f
import  -/  base-4.9.1.0:Data.Either 186ef9adf6b47e24f39efe9b2e18e352
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.Err 20faef8829fd13c027d0ee2213637534
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hjq-0.1.0.0@hjq-0.1.0.0-LRLqA3DxDyN3IXZOx6e6qQ:Data.Hjq.Parser 543bcd70f4a83971496feb0a88d92cdd
import  -/  hjq-0.1.0.0@hjq-0.1.0.0-LRLqA3DxDyN3IXZOx6e6qQ:Data.Hjq.Query 5ca633a0eaf695243f3ac89e131bef08
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens 51c282815697462fb4c0814abcb89573
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Fold 85b72028b5edba38936404deb33bd848
import  -/  lens-aeson-1.0.2@lens-aeson-1.0.2-43qoalhLTu915Xc2si0fma:Data.Aeson.Lens b8384305855d57f93f92a431497fbcef
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text 60ee6e2213faa3c3f5680c74ec6dedf8
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 95940720afdbe18ada37ea3a0ad8c1a0
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show 40865a8ac26dfeb4439a938ac126bf98
import  -/  unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Strict d885b1d9a1e033a14f7012d569830271
import  -/  vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector 1403384d2f6b40dd8aab4268ede0dcdf
b1788186de6783dd563c55d7d4cde207
  $s$fEqEither ::
    GHC.Classes.Eq
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                  (Data.Either.$fEqEither_$c==
                     @ Data.Text.Internal.Text
                     @ Data.Aeson.Types.Internal.Value
                     Data.Aeson.Types.Internal.$fEqValue
                     Data.Text.$fEqText)
                  (Data.Either.$fEqEither_$c/=
                     @ Data.Text.Internal.Text
                     @ Data.Aeson.Types.Internal.Value
                     Data.Aeson.Types.Internal.$fEqValue
                     Data.Text.$fEqText) -}
810f6e572f815855de8c3effb0504dc3
  $s$fEqEither1 ::
    GHC.Classes.Eq
      (Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                  (Data.Either.$fEqEither_$c==
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqQuery
                     Data.Hjq.Parser.$fEqJqQuery
                     Data.Text.$fEqText)
                  (Data.Either.$fEqEither_$c/=
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqQuery
                     Data.Hjq.Parser.$fEqJqQuery
                     Data.Text.$fEqText) -}
c56139dde09d16f07cdd191a0bcdd19f
  $s$fEqEither2 ::
    GHC.Classes.Eq
      (Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                  (Data.Either.$fEqEither_$c==
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqFilter
                     Data.Hjq.Parser.$fEqJqFilter
                     Data.Text.$fEqText)
                  (Data.Either.$fEqEither_$c/=
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqFilter
                     Data.Hjq.Parser.$fEqJqFilter
                     Data.Text.$fEqText) -}
c329e56ed98fa8e882d8a7b57537c232
  $s$fEqMaybe ::
    GHC.Classes.Eq
      (GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe
                       (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                  Main.$s$fEqMaybe2
                  (GHC.Base.$fEqMaybe_$c/=
                     @ (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                     Main.$s$fEqMaybe1) -}
9e3d1001e4ac0af1d167c313e1da49cb
  $s$fEqMaybe1 ::
    GHC.Classes.Eq
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fEqEither -}
49fab5dd83602e360ac39657c7ab98e6
  $s$fEqMaybe2 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: GHC.Base.Maybe
                            (Data.Either.Either
                               Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   (ds1 :: GHC.Base.Maybe
                             (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case a1 of wild2 {
                             Data.Either.Left a2
                             -> case b1 of wild3 {
                                  Data.Either.Left b2 -> Data.Text.$fEqText_$c== a2 b2
                                  Data.Either.Right ipv -> GHC.Types.False }
                             Data.Either.Right a2
                             -> case b1 of wild3 {
                                  Data.Either.Left ipv -> GHC.Types.False
                                  Data.Either.Right b2
                                  -> Data.Aeson.Types.Internal.$fEqValue_$c== a2 b2 } } } }) -}
8b365320e92036b7a705858e453e03f8
  $s$fShowEither ::
    GHC.Show.Show
      (Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqQuery
                     Data.Hjq.Parser.$fShowJqQuery
                     Data.Text.Show.$fShowText)
                  (Data.Either.$fShowEither_$cshow
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqQuery
                     Data.Hjq.Parser.$fShowJqQuery
                     Data.Text.Show.$fShowText)
                  Main.$s$fShowEither_$s$fShowEither_$cshowList -}
44ea6a1dbbd8b5f49dd1aa5ae06e75f9
  $s$fShowEither1 ::
    GHC.Show.Show
      (Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqFilter
                     Data.Hjq.Parser.$fShowJqFilter
                     Data.Text.Show.$fShowText)
                  (Data.Either.$fShowEither_$cshow
                     @ Data.Text.Internal.Text
                     @ Data.Hjq.Parser.JqFilter
                     Data.Hjq.Parser.$fShowJqFilter
                     Data.Text.Show.$fShowText)
                  Main.$s$fShowEither_$s$fShowEither_$cshowList1 -}
74eb47ffb7af9c0b908cfece6f672413
  $s$fShowEither2 ::
    GHC.Show.Show
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Data.Text.Internal.Text
                     @ Data.Aeson.Types.Internal.Value
                     Data.Aeson.Types.Internal.$fShowValue
                     Data.Text.Show.$fShowText)
                  (Data.Either.$fShowEither_$cshow
                     @ Data.Text.Internal.Text
                     @ Data.Aeson.Types.Internal.Value
                     Data.Aeson.Types.Internal.$fShowValue
                     Data.Text.Show.$fShowText)
                  Main.$s$fShowEither_$s$fShowEither_$cshowList2 -}
e2a3b5fdc85e0a86d1411353341db022
  $s$fShowEither_$s$fShowEither_$cshowList ::
    [Data.Either.Either
       Data.Text.Internal.Text Data.Hjq.Parser.JqQuery]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Data.Either.Either
                              Data.Text.Internal.Text Data.Hjq.Parser.JqQuery])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ Data.Text.Internal.Text
                      @ Data.Hjq.Parser.JqQuery
                      Data.Hjq.Parser.$fShowJqQuery
                      Data.Text.Show.$fShowText
                      Data.Either.$fShowEither1)
                   eta
                   eta1) -}
613f8e249964a47139d34c3c180ec11d
  $s$fShowEither_$s$fShowEither_$cshowList1 ::
    [Data.Either.Either
       Data.Text.Internal.Text Data.Hjq.Parser.JqFilter]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Data.Either.Either
                              Data.Text.Internal.Text Data.Hjq.Parser.JqFilter])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ Data.Text.Internal.Text
                      @ Data.Hjq.Parser.JqFilter
                      Data.Hjq.Parser.$fShowJqFilter
                      Data.Text.Show.$fShowText
                      Data.Either.$fShowEither1)
                   eta
                   eta1) -}
d4bdceba032db4437bbc39dde0c4aff6
  $s$fShowEither_$s$fShowEither_$cshowList2 ::
    [Data.Either.Either
       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Data.Either.Either
                              Data.Text.Internal.Text Data.Aeson.Types.Internal.Value])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ Data.Text.Internal.Text
                      @ Data.Aeson.Types.Internal.Value
                      Data.Aeson.Types.Internal.$fShowValue
                      Data.Text.Show.$fShowText
                      Data.Either.$fShowEither1)
                   eta
                   eta1) -}
40bc2cecee0cc5b3690523e44a941c41
  $s$fShowMaybe ::
    GHC.Show.Show
      (GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe
                       (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                     Main.$s$fShowMaybe1)
                  (GHC.Show.$fShowMaybe_$cshow
                     @ (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                     Main.$s$fShowMaybe1)
                  Main.$s$fShowMaybe_$s$fShowMaybe_$cshowList -}
5dac8a70b6edeed191d1bdec6c10a75c
  $s$fShowMaybe1 ::
    GHC.Show.Show
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) Main.$s$fShowEither2 -}
9eb5736f408f24c9facb8816aeb2d35f
  $s$fShowMaybe_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe
       (Data.Either.Either
          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe
                              (Data.Either.Either
                                 Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      Main.$s$fShowMaybe1
                      GHC.Show.shows22)
                   eta
                   eta1) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
136110f3eaccd81a31f45369439574ae
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><L,U><L,U><L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: GHC.Prim.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 letrec {
                   $wgo1 :: GHC.Prim.ByteArray#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> v
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Int#
                            -> GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     {- Arity: 7, Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>,
                        Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: GHC.Prim.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     let {
                       k2 :: Data.Text.Internal.Text = Data.Text.Internal.Text ww3 ww4 ww5
                     } in
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.>=# ww7 ww8) of wild {
                       GHC.Types.False
                       -> case GHC.Prim.indexArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds { Unit# ipv3 ->
                          case ipv3 of wild1 { Data.HashMap.Base.L kx y ->
                          case kx of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# ww5 dt5) of wild3 {
                            GHC.Types.False
                            -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            GHC.Types.True
                            -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.ByteArray#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.Word#
                                                                                                                  -> GHC.Prim.State#
                                                                                                                       GHC.Prim.RealWorld
                                                                                                                  -> (# GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld,
                                                                                                                        GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt3
                                      (GHC.Prim.int2Word# dt4)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild4 { (#,#) ds11 ds12 ->
                               case GHC.Prim.narrow32Int# ds12 of wild5 {
                                 DEFAULT -> $wgo1 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> case GHC.Prim.thawArray#
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           @ GHC.Prim.RealWorld
                                           ww6
                                           0#
                                           (GHC.Prim.sizeofArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww6)
                                           GHC.Prim.realWorld# of ds1 { (#,#) ipv4 ipv5 ->
                                    case GHC.Prim.writeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           ww7
                                           (Data.HashMap.Base.L
                                              @ Data.Text.Internal.Text
                                              @ v
                                              k2
                                              (w k2 w3 y))
                                           ipv4 of s' { DEFAULT ->
                                    case GHC.Prim.unsafeFreezeArray#
                                           @ GHC.Prim.RealWorld
                                           @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                           ipv5
                                           s' of ds2 { (#,#) ipv6 ipv7 ->
                                    ipv7 } } } } } } } } }
                       GHC.Types.True
                       -> case GHC.Prim.newArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 (GHC.Prim.+# ww8 1#)
                                 (Data.HashMap.Array.undefinedElem
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                 GHC.Prim.realWorld# of ds { (#,#) ipv3 ipv4 ->
                          case GHC.Prim.copyArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 @ GHC.Prim.RealWorld
                                 ww6
                                 0#
                                 ipv4
                                 0#
                                 ww8
                                 ipv3 of s2 { DEFAULT ->
                          case GHC.Prim.writeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 ww8
                                 (Data.HashMap.Base.L @ Data.Text.Internal.Text @ v k2 w3)
                                 s2 of s' { DEFAULT ->
                          case GHC.Prim.unsafeFreezeArray#
                                 @ GHC.Prim.RealWorld
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ipv4
                                 s' of ds1 { (#,#) ipv5 ipv6 ->
                          ipv6 } } } } }
                 } in
                 $wgo1
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
4e4768094c2a28740d266233f489a8c9
  $w$slookup ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.narrow32Int# (GHC.Prim.uncheckedIShiftL# ww1 1#))
                        (GHC.Prim.narrow32Int# (GHC.Prim.uncheckedIShiftL# ww2 1#))
                        1534328996#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Main.$wpoly_go3
                   @ v
                   (GHC.Prim.int2Word# (GHC.Prim.narrow32Int# ds2))
                   ww
                   ww1
                   ww2
                   0#
                   w }) -}
dc8e9e1f2e34e693b51972cc3aab8c1b
  $w$sunsafeInsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol hashable_fnv_hash_offset GHC.Prim.ByteArray#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.Int#
                                                                                                                     -> GHC.Prim.State#
                                                                                                                          GHC.Prim.RealWorld
                                                                                                                     -> (# GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld,
                                                                                                                           GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.narrow32Int# (GHC.Prim.uncheckedIShiftL# ww1 1#))
                        (GHC.Prim.narrow32Int# (GHC.Prim.uncheckedIShiftL# ww2 1#))
                        1534328996#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 case Main.$wpoly_go4
                        @ GHC.Prim.RealWorld
                        @ v
                        (GHC.Prim.int2Word# (GHC.Prim.narrow32Int# ds2))
                        ww
                        ww1
                        ww2
                        w
                        0#
                        w1
                        GHC.Prim.realWorld# of ds { (#,#) ipv ipv1 ->
                 ipv1 } }) -}
21fe347751ae2f4136359896341a812a
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><S,U><S,U><S,U>, Inline: [0] -}
f3ecb79e0782b74a4e69e9c4b931b6a0
  $wpoly_go3 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>, Inline: [0] -}
67764441f597f9df4caf4f0dfad517af
  $wpoly_go4 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Prim.State# s
    -> (# GHC.Prim.State# s,
          Data.HashMap.Base.HashMap Data.Text.Internal.Text v #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,U>,
     Inline: [0] -}
c8beb5780d073f4e26a585f0bf13d72e
  applyFilterTest :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList Main.applyFilterTest1) -}
2633f15a74de8ddb03dd2cd2db038668
  applyFilterTest1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest114
                   Main.applyFilterTest2) -}
2753e043825de63bec97584385fdaf6c
  applyFilterTest10 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest25
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest24
                   Main.applyFilterTest11) -}
028e2988309992a492860bbc19dcb911
  applyFilterTest100 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest105
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest104
                   Main.applyFilterTest101) -}
8086800725052f89b4da6372ba5c1e04
  applyFilterTest101 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest102) -}
8754304fc9f9e8dabfebfd81a4e0b20b
  applyFilterTest102 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest103 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
2e9bc1fee01f27cf8274006bd9f6a91f
  applyFilterTest103 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".string-field"#) -}
579b73e668c969025ec0abb67f1bda05
  applyFilterTest104 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "string-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just x
                        -> GHC.Base.Just
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             (Data.Either.Right
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value
                                x) } } }) -}
aa7fe205b1ece78e49191f7a0480c70d
  applyFilterTest105 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest106
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
b806ea073c9d917b8665c804ba2a2eee
  applyFilterTest106 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest107) -}
f3ebb0192048272b1651eb3ddcb15120
  applyFilterTest107 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest108) -}
75e632a540be13a12c27b5e4d0d53e5e
  applyFilterTest108 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest109
                   GHC.Stack.Types.EmptyCallStack) -}
b7c0db6ab8e22e642e548908c1149dc5
  applyFilterTest109 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest112
                   Main.applyFilterTest32
                   Main.applyFilterTest111
                   Main.applyFilterTest110) -}
81e4f2185c4d7f0de0051671757de91a
  applyFilterTest11 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest12) -}
c393e6cc79a37b87f69c20ee042efe09
  applyFilterTest110 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 60#) -}
730fd73f05d8e7ce401cec5e78a40ec4
  applyFilterTest111 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 104#) -}
74d7335b2221d99892a4cae0bd4adb43
  applyFilterTest112 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 103#) -}
32d8c59a77475867b6cb36fbaea2dcbd
  applyFilterTest113 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 2"#) -}
f9a5c37dc53145049e0589b087bbc155
  applyFilterTest114 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest129
                   Main.applyFilterTest115) -}
86cf986083ead4f22f2dcfd355d5e0cb
  applyFilterTest115 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest116) -}
45f5f819b9a642343d0d7b2bdcef528e
  applyFilterTest116 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest121
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest120
                   Main.applyFilterTest117) -}
b1363f4b37cec4a9500662fd581faf66
  applyFilterTest117 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Main.applyFilterTest118 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
b683a32bccd22853a71d79ead6c92bb8
  applyFilterTest118 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.applyFilterTest119) -}
1c8f76dc57a86f605d05a085d4804cef
  applyFilterTest119 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "."#) -}
f75de84dc31d317d7c391242fa66d6d5
  applyFilterTest12 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest23 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
92a31c0de119218f4f75ec29ce285db8
  applyFilterTest120 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Aeson.Types.Internal.Value
                   Main.testData) -}
474ddeb43665d5628363c738b0e4f20c
  applyFilterTest121 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest122
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither
                   Main.$s$fShowEither2) -}
15e8a533a7ae1d171ed7c6447f0bd7f3
  applyFilterTest122 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest123) -}
8d214da8833448f60761cb4fe20e1cda
  applyFilterTest123 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest124) -}
5f54de3be9d683f3ec8724c4cdceb1c9
  applyFilterTest124 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest125
                   GHC.Stack.Types.EmptyCallStack) -}
6cb7601624cff3ec3f650c7349fddf64
  applyFilterTest125 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest128
                   Main.applyFilterTest127
                   Main.applyFilterTest128
                   Main.applyFilterTest126) -}
d2ac7fd0a7d17b8da0c8d96a0727620f
  applyFilterTest126 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 97#) -}
c7d6a44130df2aaa7ffe1a75de2f9043
  applyFilterTest127 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 33#) -}
28e4b01963ef25dc355e341af3077db5
  applyFilterTest128 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 101#) -}
9155fa44ac38a6ea761a02ef0776c21c
  applyFilterTest129 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 1"#) -}
f1883197af6321013b8c13bb8fe3fe82
  applyFilterTest13 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: (\ @ b
                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                   (n :: b)[OneShot] ->
                 GHC.CString.unpackFoldrCString#
                   @ b
                   "PARSE FAILURE IN A TEST :"#
                   c
                   n) -}
0d73d39fb24492d81c65b48bfb6a01a4
  applyFilterTest14 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest22
                   Main.applyFilterTest15
                   GHC.Stack.Types.EmptyCallStack) -}
69b7592a7ca271e94b45b0a7c0f87f59
  applyFilterTest15 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest18
                   Main.applyFilterTest17
                   Main.applyFilterTest18
                   Main.applyFilterTest16) -}
0537289c1ee8937e4c98737d29a97152
  applyFilterTest16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 62#) -}
d05aaab5ed6fc891f8c070b2a7e08b58
  applyFilterTest17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 15#) -}
89f42248d225b058b93258111a2624c7
  applyFilterTest18 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 95#) -}
e4a3c1fd491ebbc0cc82c2f3bc6cc16f
  applyFilterTest19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test\\Spec.hs"#) -}
6e23b54c05da6ede37fe69d6fcb35ace
  applyFilterTest2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest98
                   Main.applyFilterTest3) -}
308fd445c63164021cbbf26dbeccc9e1
  applyFilterTest20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Main"#) -}
2c4cf2397ef1e86b2ea00977d381f2ce
  applyFilterTest21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
dd8861bf1e166eeb125ccac81e453440
  applyFilterTest22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "error"#) -}
53b345b798ec29a1082a65e8fc780364
  applyFilterTest23 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ".array-field[2].object-in-array"#) -}
95d24725874c67ca5837dd59c6ed1f71
  applyFilterTest24 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "array-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just v
                        -> case v of wild2 {
                             DEFAULT
                             -> GHC.Base.Nothing
                                  @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             Data.Aeson.Types.Internal.Array a
                             -> case a of wild3 { Data.Vector.Vector dt dt1 dt2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# 2# dt1) of wild4 {
                                  GHC.Types.False
                                  -> GHC.Base.Nothing
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  GHC.Types.True
                                  -> case GHC.Prim.indexArray#
                                            @ Data.Aeson.Types.Internal.Value
                                            dt2
                                            (GHC.Prim.+# dt 2#) of ds1 { Unit# ipv ->
                                     case ipv of wild5 {
                                       DEFAULT
                                       -> GHC.Base.Nothing
                                            @ (Data.Either.Either
                                                 Data.Text.Internal.Text
                                                 Data.Aeson.Types.Internal.Value)
                                       Data.Aeson.Types.Internal.Object o1
                                       -> case Data.Text.Show.unpackCString#
                                                 "object-in-array"# of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                          case Main.$w$slookup
                                                 @ Data.Aeson.Types.Internal.Value
                                                 ww5
                                                 ww6
                                                 ww7
                                                 o1 of wild6 {
                                            GHC.Base.Nothing
                                            -> GHC.Base.Nothing
                                                 @ (Data.Either.Either
                                                      Data.Text.Internal.Text
                                                      Data.Aeson.Types.Internal.Value)
                                            GHC.Base.Just x
                                            -> GHC.Base.Just
                                                 @ (Data.Either.Either
                                                      Data.Text.Internal.Text
                                                      Data.Aeson.Types.Internal.Value)
                                                 (Data.Either.Right
                                                    @ Data.Text.Internal.Text
                                                    @ Data.Aeson.Types.Internal.Value
                                                    x) } } } } } } } } } }) -}
d2b719a7b68d227a5d93ee49f6fd0ba1
  applyFilterTest25 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest26
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
a089ee4f1fbd57d728152db51618def3
  applyFilterTest26 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest27) -}
78d8444872f52d2d6b8d2d6863985bbd
  applyFilterTest27 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest28) -}
5874f9f9de72977bacf2008bdd700e33
  applyFilterTest28 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest29
                   GHC.Stack.Types.EmptyCallStack) -}
354946c6ee7f66894e33175b4d084f56
  applyFilterTest29 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest33
                   Main.applyFilterTest32
                   Main.applyFilterTest31
                   Main.applyFilterTest30) -}
2aeb2814b91d4d6a6b554055d06575a0
  applyFilterTest3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest83
                   Main.applyFilterTest4) -}
8f4920f5fa4c34bb440ff3a6ceca5f0c
  applyFilterTest30 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 91#) -}
bae6a9a454d0eecab749fb4d6f80622c
  applyFilterTest31 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 119#) -}
4a6d29e16ab13f5c8697001c878cdf5f
  applyFilterTest32 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 13#) -}
8ebeca5cf05a3c65e25257e64ee13c5f
  applyFilterTest33 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 118#) -}
7cabb34cbdd93a773d9e3e0f414727a8
  applyFilterTest34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "~?="#) -}
266f68bdb8c9d8e0d4221fec81804886
  applyFilterTest35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 7"#) -}
7bbed7e9580082fdf165aea6b13d4436
  applyFilterTest36 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest51
                   Main.applyFilterTest37) -}
334333f3cf8713c25e38955e5d3fb48b
  applyFilterTest37 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest38) -}
6f0bc295f272d5e91320fac328783ee1
  applyFilterTest38 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest43
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest42
                   Main.applyFilterTest39) -}
a296451080bead460731e585fd355692
  applyFilterTest39 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest40) -}
ae6acbb60e9c626fc87e3e5e3975da3f
  applyFilterTest4 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest67
                   Main.applyFilterTest5) -}
af80dfb34018042fe87fa9e65d294f0d
  applyFilterTest40 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest41 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
1446b2d1cb8c9a830a88b88d8e1c22a7
  applyFilterTest41 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".array-field[1]"#) -}
78c65016ec3e7cf765b13a630011537c
  applyFilterTest42 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "array-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just v
                        -> case v of wild2 {
                             DEFAULT
                             -> GHC.Base.Nothing
                                  @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             Data.Aeson.Types.Internal.Array a
                             -> case a of wild3 { Data.Vector.Vector dt dt1 dt2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# 1# dt1) of wild4 {
                                  GHC.Types.False
                                  -> GHC.Base.Nothing
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  GHC.Types.True
                                  -> GHC.Base.Just
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                       (Data.Either.Right
                                          @ Data.Text.Internal.Text
                                          @ Data.Aeson.Types.Internal.Value
                                          (case GHC.Prim.indexArray#
                                                  @ Data.Aeson.Types.Internal.Value
                                                  dt2
                                                  (GHC.Prim.+# dt 1#) of ds1 { Unit# ipv ->
                                           ipv })) } } } } } }) -}
a20d8e096bfd08ce10a6842bc1ce3fe1
  applyFilterTest43 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest44
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
b94b62a55c496c23b5faf77fd0642fb8
  applyFilterTest44 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest45) -}
8f4eb01360d0b5a07ceaf43669289210
  applyFilterTest45 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest46) -}
0f652bd79132802c453914256cad3b9e
  applyFilterTest46 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest47
                   GHC.Stack.Types.EmptyCallStack) -}
015a66dc1e478c403c8fe6574baf4da2
  applyFilterTest47 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest50
                   Main.applyFilterTest32
                   Main.applyFilterTest49
                   Main.applyFilterTest48) -}
df20d891b8538a664fd0426d77162b98
  applyFilterTest48 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 67#) -}
dc8fdbe8a42868a265e31b939d7adaeb
  applyFilterTest49 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 116#) -}
e323e2df90c4a2299a2170becf237b41
  applyFilterTest5 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest52
                   Main.applyFilterTest6) -}
0adbb798f0b5401f79401ad9a879dd26
  applyFilterTest50 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 115#) -}
5b65070c9eadeedf9c18702ed189fc74
  applyFilterTest51 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 6"#) -}
0957bbff6fd81b6da2404ceb55fa1b01
  applyFilterTest52 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest66
                   Main.applyFilterTest53) -}
261330981e65e1762d82d2cd7ac709c2
  applyFilterTest53 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest54) -}
95a59fa0c4c7f5a471d0296cad3a5f67
  applyFilterTest54 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest59
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest58
                   Main.applyFilterTest55) -}
8e6ef92f6c79588dd48bf3fbde78975e
  applyFilterTest55 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest56) -}
2993770252248c00e5dd5b8174698ed0
  applyFilterTest56 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest57 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
a360e291be5de3c18b08a589d2364ae3
  applyFilterTest57 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".array-field[0]"#) -}
ec0e03a65836f92ed77d584ed15cd28f
  applyFilterTest58 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "array-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just v
                        -> case v of wild2 {
                             DEFAULT
                             -> GHC.Base.Nothing
                                  @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             Data.Aeson.Types.Internal.Array a
                             -> case a of wild3 { Data.Vector.Vector dt dt1 dt2 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<# 0# dt1) of wild4 {
                                  GHC.Types.False
                                  -> GHC.Base.Nothing
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  GHC.Types.True
                                  -> GHC.Base.Just
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                       (Data.Either.Right
                                          @ Data.Text.Internal.Text
                                          @ Data.Aeson.Types.Internal.Value
                                          (case GHC.Prim.indexArray#
                                                  @ Data.Aeson.Types.Internal.Value
                                                  dt2
                                                  dt of ds1 { Unit# ipv ->
                                           ipv })) } } } } } }) -}
0a03cb6aa9cac19daf4f7f23f8528208
  applyFilterTest59 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest60
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
a51349afd2b98283ef0ddb2a968d35d1
  applyFilterTest6 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest36
                   Main.applyFilterTest7) -}
c1199471e11379f2b8034ae58ef992b6
  applyFilterTest60 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest61) -}
060a773beb99379d1905bdc85925e019
  applyFilterTest61 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest62) -}
dde7d8e0c32bf5e96ce9f192fcf4ec8b
  applyFilterTest62 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest63
                   GHC.Stack.Types.EmptyCallStack) -}
b1b95c2fefe679b5d65a43f23e6264fb
  applyFilterTest63 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest65
                   Main.applyFilterTest32
                   Main.applyFilterTest64
                   Main.applyFilterTest48) -}
d3c94f289d7287c85042344fe3e72057
  applyFilterTest64 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 113#) -}
a761fd1b1a496d88a6cfb771f89f1e3c
  applyFilterTest65 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 112#) -}
e046e5ab8a25459df65fe1980b67fe8f
  applyFilterTest66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 5"#) -}
eddd76e35e7150404c25017f94716313
  applyFilterTest67 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest82
                   Main.applyFilterTest68) -}
fb6ebf789924e2e3b5055e26c6e90b15
  applyFilterTest68 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest69) -}
d8dd6f474e32d1a15094b6741e9b2d46
  applyFilterTest69 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest74
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest73
                   Main.applyFilterTest70) -}
19f0271db23b4f14888de9df047458bf
  applyFilterTest7 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest8
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
32435819de64330c61ca444c883cdfce
  applyFilterTest70 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest71) -}
d4a11c1b854d792a49e34d917e6e541b
  applyFilterTest71 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest72 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
65fed6baf807bdc96cdd91a6542c4028
  applyFilterTest72 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ".nested-field.inner-number"#) -}
fbc441e04ca3cfdb5bdc0d3ea2098aac
  applyFilterTest73 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "nested-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just v
                        -> case v of wild2 {
                             DEFAULT
                             -> GHC.Base.Nothing
                                  @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             Data.Aeson.Types.Internal.Object o1
                             -> case Data.Text.Show.unpackCString#
                                       "inner-number"# of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                case Main.$w$slookup
                                       @ Data.Aeson.Types.Internal.Value
                                       ww5
                                       ww6
                                       ww7
                                       o1 of wild3 {
                                  GHC.Base.Nothing
                                  -> GHC.Base.Nothing
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  GHC.Base.Just x
                                  -> GHC.Base.Just
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                       (Data.Either.Right
                                          @ Data.Text.Internal.Text
                                          @ Data.Aeson.Types.Internal.Value
                                          x) } } } } } }) -}
6639b1effed6d13cea1162132f366890
  applyFilterTest74 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest75
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
ab19cae427ea7c76dfe500ac3c7ba7d1
  applyFilterTest75 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest76) -}
bd7d025a2dc51e1a85458cdf6bab2c0e
  applyFilterTest76 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest77) -}
169547bddba64d6786798c99f45720ce
  applyFilterTest77 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest78
                   GHC.Stack.Types.EmptyCallStack) -}
f3a12b352db26571fdab8ed8026cc495
  applyFilterTest78 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest81
                   Main.applyFilterTest32
                   Main.applyFilterTest80
                   Main.applyFilterTest79) -}
8bab19b917db09115a62331e02c9fa1e
  applyFilterTest79 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 81#) -}
7e947e77b251c33ffff51848effbb3d8
  applyFilterTest8 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest35
                   Main.applyFilterTest9) -}
6d0e62821909ac60cf1a9298ce5034f5
  applyFilterTest80 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 110#) -}
28634a8a11b694b62b8f350305e26bef
  applyFilterTest81 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 109#) -}
d38d24e56ade6bf4c365bb18abfe70df
  applyFilterTest82 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 4"#) -}
552540ec84a396b1a0e1f5f57541c19f
  applyFilterTest83 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest97
                   Main.applyFilterTest84) -}
6e9d12cfc32ece0ebc17b303c52f0dbc
  applyFilterTest84 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest85) -}
2e04d029cae50cd9663b321d41e3feef
  applyFilterTest85 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.applyFilterTest90
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.applyFilterTest89
                   Main.applyFilterTest86) -}
6bfb2439ab83b72099f0956f7af0cc07
  applyFilterTest86 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (GHC.Base.Just
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Main.applyFilterTest87) -}
4a7371f1b001595305349935fafe2f6f
  applyFilterTest87 ::
    Data.Either.Either
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Hjq.Parser.parserJqFilter
                        Main.applyFilterTest88 of wild {
                   Data.Either.Left s
                   -> case GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ Data.Hjq.Parser.JqFilter
                             Main.applyFilterTest14
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (Main.applyFilterTest13
                                @ [GHC.Types.Char]
                                (GHC.Types.: @ GHC.Types.Char)
                                (case s of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                                 let {
                                   end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                 } in
                                 letrec {
                                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                   = \ (ww :: GHC.Prim.Int#) ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# ww end) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.geWord# r# 55296##) of wild3 {
                                            GHC.Types.False
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 (GHC.Types.C#
                                                    (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                 ($wunfold (GHC.Prim.+# ww 1#))
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.leWord# r# 56319##) of wild4 {
                                                 GHC.Types.False
                                                 -> GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                      ($wunfold (GHC.Prim.+# ww 1#))
                                                 GHC.Types.True
                                                 -> case GHC.Prim.indexWord16Array#
                                                           dt
                                                           (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      (GHC.Types.C#
                                                         (GHC.Prim.chr#
                                                            (GHC.Prim.+#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.uncheckedIShiftL#
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#)
                                                                        55296#)
                                                                     10#)
                                                                  (GHC.Prim.-#
                                                                     (GHC.Prim.word2Int# r#1)
                                                                     56320#))
                                                               65536#)))
                                                      ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                       GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                                 } in
                                 $wunfold dt1 }))
                      ret_ty (Data.Either.Either
                                Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                      of {}
                   Data.Either.Right f
                   -> Data.Hjq.Query.applyFilter f Main.testData }) -}
84393986ddc8ad9dc2821a748b447ea1
  applyFilterTest88 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   ".nested-field.inner-string"#) -}
bca05f6213376ff02f71741ce021c9e7
  applyFilterTest89 ::
    GHC.Base.Maybe
      (Data.Either.Either
         Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
  {- Unfolding: (case Main.testData of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Data.Either.Either
                             Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                   Data.Aeson.Types.Internal.Object o
                   -> case Data.Text.Show.unpackCString#
                             "nested-field"# of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Main.$w$slookup
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             o of wild1 {
                        GHC.Base.Nothing
                        -> GHC.Base.Nothing
                             @ (Data.Either.Either
                                  Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                        GHC.Base.Just v
                        -> case v of wild2 {
                             DEFAULT
                             -> GHC.Base.Nothing
                                  @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                             Data.Aeson.Types.Internal.Object o1
                             -> case Data.Text.Show.unpackCString#
                                       "inner-string"# of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                case Main.$w$slookup
                                       @ Data.Aeson.Types.Internal.Value
                                       ww5
                                       ww6
                                       ww7
                                       o1 of wild3 {
                                  GHC.Base.Nothing
                                  -> GHC.Base.Nothing
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  GHC.Base.Just x
                                  -> GHC.Base.Just
                                       @ (Data.Either.Either
                                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                       (Data.Either.Right
                                          @ Data.Text.Internal.Text
                                          @ Data.Aeson.Types.Internal.Value
                                          x) } } } } } }) -}
b2d3a7c2e53707e01f25fec0ff64fd83
  applyFilterTest9 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest10) -}
dd21c2b22119a7a6db0857d5b4c0745d
  applyFilterTest90 ::
    GHC.Base.String
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> GHC.Base.Maybe
         (Data.Either.Either
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe
                        (Data.Either.Either
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value))
                   Main.applyFilterTest91
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqMaybe
                   Main.$s$fShowMaybe) -}
6fe54b8996778fdd0ab356c13fddae58
  applyFilterTest91 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.applyFilterTest92) -}
ce3a50722ee175549b954bf9bfa3ece8
  applyFilterTest92 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.applyFilterTest93) -}
2e30ad2b5868c540ce755c603b0801e8
  applyFilterTest93 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.applyFilterTest94
                   GHC.Stack.Types.EmptyCallStack) -}
f5d47614cca5d395be62027e459d1a32
  applyFilterTest94 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest96
                   Main.applyFilterTest32
                   Main.applyFilterTest95
                   Main.applyFilterTest79) -}
b16687ae50d7715afaed3444ac8126fd
  applyFilterTest95 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 107#) -}
4411d02334e61b33dd1b0bd9d6c16405
  applyFilterTest96 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 106#) -}
6d193188eb656cc4f27d5f958f7435fa
  applyFilterTest97 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "applyFilter test 3"#) -}
e8fcda3897276b14a0b3ded2c1c29158
  applyFilterTest98 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.applyFilterTest113
                   Main.applyFilterTest99) -}
27af1096590882f1357d4581c1234c7a
  applyFilterTest99 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.applyFilterTest100) -}
ef5ad08f8e794149ce3fcdf0cecc70bf
  jqFilterParserSpacesTest :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList
                   Main.jqFilterParserSpacesTest1) -}
bc4ad2930b4d8cf5a0c71235c38f6188
  jqFilterParserSpacesTest1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest67
                   Main.jqFilterParserSpacesTest2) -}
e68bceb53802bf8d80b0aa4829477489
  jqFilterParserSpacesTest10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   " . fieldName [ 0 ] "#) -}
17392134efddbd0ed801daef4c3724cd
  jqFilterParserSpacesTest11 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqFilter
                   Main.jqFilterParserSpacesTest12) -}
983cde1d27c79b60bef3903c655a355d
  jqFilterParserSpacesTest12 :: Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.JqField
                   Main.jqFilterParserSpacesTest15
                   Main.jqFilterParserSpacesTest13) -}
828619069c248b39f51fd97fc98f8359
  jqFilterParserSpacesTest13 :: Data.Hjq.Parser.JqFilter
  {- HasNoCafRefs,
     Unfolding: (Data.Hjq.Parser.JqIndex
                   Main.jqFilterParserSpacesTest14
                   Data.Hjq.Parser.JqNil) -}
a683b81dc1c07b37e2ba9d27ab9d32ff
  jqFilterParserSpacesTest14 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
fed38d6f27638a04a9e067b4ca4c015f
  jqFilterParserSpacesTest15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "fieldName"#) -}
6aa48bc459331fb18747872da49b1dbf
  jqFilterParserSpacesTest16 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserSpacesTest17
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
ad4a150face4bd54262365ee9e0e3eb4
  jqFilterParserSpacesTest17 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserSpacesTest18) -}
f7b23a40c394f0ac60494ab34793186d
  jqFilterParserSpacesTest18 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserSpacesTest19) -}
c25e03ebc6f8846e9198f34c45bce386
  jqFilterParserSpacesTest19 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserSpacesTest20
                   GHC.Stack.Types.EmptyCallStack) -}
f982023d92278b3991c433cc9bfb45e3
  jqFilterParserSpacesTest2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest53
                   Main.jqFilterParserSpacesTest3) -}
6eeea8df0a9eb6879dfe122dcdbba54d
  jqFilterParserSpacesTest20 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserSpacesTest23
                   Main.jqFilterParserSpacesTest22
                   Main.jqFilterParserSpacesTest23
                   Main.jqFilterParserSpacesTest21) -}
0cce9266da298d87568fa2e1eec2de39
  jqFilterParserSpacesTest21 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 130#) -}
6763321ae04bba0adf6e79ae108db58c
  jqFilterParserSpacesTest22 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 44#) -}
abc496801e62c861e77afd224aeeebbf
  jqFilterParserSpacesTest23 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 46#) -}
be281c188b75a565b0a88832ff0c036a
  jqFilterParserSpacesTest24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser spaces test 5"#) -}
f473d39f7482efa777610f43a35f4a75
  jqFilterParserSpacesTest25 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserSpacesTest40
                   Main.jqFilterParserSpacesTest26) -}
1fa4c7e09584e47fed2a1878c361c5d5
  jqFilterParserSpacesTest26 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqFilterParserSpacesTest27) -}
f94f26a38ff47145cfdd4f95f5a10e4f
  jqFilterParserSpacesTest27 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserSpacesTest33
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest30
                   Main.jqFilterParserSpacesTest28) -}
e5a0cb8b1fe8fc617dc874150565c156
  jqFilterParserSpacesTest28 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserSpacesTest29) -}
02f103804a59235d26d675201e62a066
  jqFilterParserSpacesTest29 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   " . [ 0 ] . fieldName "#) -}
499e7ea4589980dcc8b13cb804ae7fe2
  jqFilterParserSpacesTest3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest41
                   Main.jqFilterParserSpacesTest4) -}
0c4c6f1981c73ea981b81787053a449d
  jqFilterParserSpacesTest30 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqFilter
                   Main.jqFilterParserSpacesTest31) -}
319ffb196f8439ec11bdd37233fb726a
  jqFilterParserSpacesTest31 :: Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.JqIndex
                   Main.jqFilterParserSpacesTest14
                   Main.jqFilterParserSpacesTest32) -}
810d07d5ca0650c601a65a75d74d5b92
  jqFilterParserSpacesTest32 :: Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.JqField
                   Main.jqFilterParserSpacesTest15
                   Data.Hjq.Parser.JqNil) -}
6ecab7e937a59ede6ae1d2e88e3a1797
  jqFilterParserSpacesTest33 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserSpacesTest34
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
decf60d2549f008c280fe7b98dd479a9
  jqFilterParserSpacesTest34 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserSpacesTest35) -}
17af16e5025bf4a17a20ba97b1f0ef94
  jqFilterParserSpacesTest35 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserSpacesTest36) -}
eebc7bafcf93ab86147168e97fd2d1df
  jqFilterParserSpacesTest36 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserSpacesTest37
                   GHC.Stack.Types.EmptyCallStack) -}
2225e9d2a2363f4c5490019fcd8caae2
  jqFilterParserSpacesTest37 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserSpacesTest39
                   Main.jqFilterParserSpacesTest22
                   Main.jqFilterParserSpacesTest39
                   Main.jqFilterParserSpacesTest38) -}
cdeda768925309509d086dff9f8979c2
  jqFilterParserSpacesTest38 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 132#) -}
4aec5d649fec550fbc4b02500de64ee2
  jqFilterParserSpacesTest39 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 45#) -}
81f6a9a5be9753be0ecc7666956943bb
  jqFilterParserSpacesTest4 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest25
                   Main.jqFilterParserSpacesTest5) -}
c9813c10213b06c25529129051bf96d9
  jqFilterParserSpacesTest40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser spaces test 4"#) -}
c9698b9af5b5a23c6bad3b61354ca67a
  jqFilterParserSpacesTest41 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserSpacesTest52
                   Main.jqFilterParserSpacesTest42) -}
5ec44b42920f772135f9d627bbf812f4
  jqFilterParserSpacesTest42 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqFilterParserSpacesTest43) -}
5b7bf4105dc7e9b78cdd4819cc078c33
  jqFilterParserSpacesTest43 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserSpacesTest47
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest46
                   Main.jqFilterParserSpacesTest44) -}
0b2e865caec4fd7e2cc2be276d3575b1
  jqFilterParserSpacesTest44 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserSpacesTest45) -}
a9807e8d6240a047e686b291fb5e4a7f
  jqFilterParserSpacesTest45 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# " . fieldName "#) -}
f77ac1a5a26e9817f3880c7fad34f2af
  jqFilterParserSpacesTest46 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqFilter
                   Main.jqFilterParserSpacesTest32) -}
70a096fe3ddcc6b6ac87c10899df8188
  jqFilterParserSpacesTest47 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserSpacesTest48
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
9bed5fa309e6e342482a1251ce35ee3c
  jqFilterParserSpacesTest48 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserSpacesTest49) -}
c703391ed2edc81dfe3cd264fef3998f
  jqFilterParserSpacesTest49 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserSpacesTest50) -}
aa3a5ba97d1881104284f73da3cf04f3
  jqFilterParserSpacesTest5 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest6
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
803bdd16b8439d25afccec8daa0f4406
  jqFilterParserSpacesTest50 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserSpacesTest51
                   GHC.Stack.Types.EmptyCallStack) -}
327d9aad2093aa89cbf7892726d28f18
  jqFilterParserSpacesTest51 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserSpacesTest22
                   Main.jqFilterParserSpacesTest22
                   Main.jqFilterParserSpacesTest22
                   Main.applyFilterTest65) -}
245fc15c3732cdce327f24a4c806f0a9
  jqFilterParserSpacesTest52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser spaces test 3"#) -}
f9ebd965f4c04fb0495e940573cf2778
  jqFilterParserSpacesTest53 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserSpacesTest66
                   Main.jqFilterParserSpacesTest54) -}
79b160f9ba5959a64432b4c09d523964
  jqFilterParserSpacesTest54 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqFilterParserSpacesTest55) -}
7ca65260ece51e78ef3b4a1f2850cdef
  jqFilterParserSpacesTest55 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserSpacesTest59
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest58
                   Main.jqFilterParserSpacesTest56) -}
6c85bad8efa5df276b4dc968e94f355d
  jqFilterParserSpacesTest56 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserSpacesTest57) -}
bf1c6a457bf8f6c2b556845a9d90d058
  jqFilterParserSpacesTest57 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# " . [ 0 ] "#) -}
87b02cfc47456a50013a9c401b2cf40a
  jqFilterParserSpacesTest58 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqFilter
                   Main.jqFilterParserSpacesTest13) -}
9597e70a5cc39c93ae9f359505882015
  jqFilterParserSpacesTest59 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserSpacesTest60
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
cc95a711f3e70924fc5a1a7b1102b6c8
  jqFilterParserSpacesTest6 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserSpacesTest24
                   Main.jqFilterParserSpacesTest7) -}
c53d8936a3f9886087083c652e87c7a9
  jqFilterParserSpacesTest60 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserSpacesTest61) -}
4fe578b41d085d0938073364c1623be8
  jqFilterParserSpacesTest61 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserSpacesTest62) -}
8101ef8af6b8c367762e3cd0b0720175
  jqFilterParserSpacesTest62 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserSpacesTest63
                   GHC.Stack.Types.EmptyCallStack) -}
1dc7afbaffdf2a1c3bfc6565c17e31e2
  jqFilterParserSpacesTest63 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserSpacesTest65
                   Main.jqFilterParserSpacesTest22
                   Main.jqFilterParserSpacesTest65
                   Main.jqFilterParserSpacesTest64) -}
3945938092be612aace77ac0e77b0724
  jqFilterParserSpacesTest64 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 98#) -}
a93747e7b3674651bad9dd1311cd1166
  jqFilterParserSpacesTest65 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 43#) -}
c048fcefe7c0b1bd0084a267c0f5bf55
  jqFilterParserSpacesTest66 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser spaces test 2"#) -}
bfba99ac046a9533f4f36154e509d6a6
  jqFilterParserSpacesTest67 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserSpacesTest80
                   Main.jqFilterParserSpacesTest68) -}
68d66fcf100ebf9ac5480893e8ac7b89
  jqFilterParserSpacesTest68 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqFilterParserSpacesTest69) -}
54cde0b8a71079a3c9cc73de3820abd0
  jqFilterParserSpacesTest69 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserSpacesTest73
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest72
                   Main.jqFilterParserSpacesTest70) -}
907f60a3690e5def6f45c35a8c1d7b8b
  jqFilterParserSpacesTest7 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqFilterParserSpacesTest8) -}
f23f622ac3d47ab26404dcf0ee29c892
  jqFilterParserSpacesTest70 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserSpacesTest71) -}
8cdac7be8ab06502c0422bf76863cd50
  jqFilterParserSpacesTest71 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# " . "#) -}
f8e81c3fb3ca8c25d6b14b15053cc97c
  jqFilterParserSpacesTest72 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqFilter
                   Data.Hjq.Parser.JqNil) -}
aa1334b524eb72068bec2c6ae647c627
  jqFilterParserSpacesTest73 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserSpacesTest74
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
7673fa1e9af8217e81767cbd8dd34bd4
  jqFilterParserSpacesTest74 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserSpacesTest75) -}
4b53a33e906fbc191bfd90ac38ecb645
  jqFilterParserSpacesTest75 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserSpacesTest76) -}
a53fd038f6f5a2f655e29b9620e989c9
  jqFilterParserSpacesTest76 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserSpacesTest77
                   GHC.Stack.Types.EmptyCallStack) -}
e93e847770583da90a11c0a869a3fb68
  jqFilterParserSpacesTest77 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserSpacesTest79
                   Main.jqFilterParserSpacesTest65
                   Main.jqFilterParserSpacesTest79
                   Main.jqFilterParserSpacesTest78) -}
7765414ed28e1cee2bf4babed41b1c49
  jqFilterParserSpacesTest78 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 79#) -}
1d9a879f9898b689bbb0fc3f51e5404c
  jqFilterParserSpacesTest79 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 42#) -}
66d955caa9bef78525ad3f9cafc599b3
  jqFilterParserSpacesTest8 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserSpacesTest16
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest11
                   Main.jqFilterParserSpacesTest9) -}
ffd2ec87792d5033134ec5b88b1224ff
  jqFilterParserSpacesTest80 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser spaces test 1"#) -}
ba51d01ebec4e58fea4656a94424b80f
  jqFilterParserSpacesTest9 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserSpacesTest10) -}
90e324bf940aeab699675cc7d4cf5fba
  jqFilterParserTest :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList Main.jqFilterParserTest1) -}
3e939e9ac1e912eab020de9f2f133d58
  jqFilterParserTest1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest57
                   Main.jqFilterParserTest2) -}
356f04e123a75af13355d94eaca25e94
  jqFilterParserTest10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".fieldName[0]"#) -}
88a28cc229e26ae145b90145defcc1cf
  jqFilterParserTest11 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserTest12
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
1be3c3acf470aa34566a32783ec89857
  jqFilterParserTest12 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserTest13) -}
c9b60cbdf94e46ab9090ce613df9b7cb
  jqFilterParserTest13 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserTest14) -}
07c631c1dd309e19a6a20c9e80684840
  jqFilterParserTest14 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserTest15
                   GHC.Stack.Types.EmptyCallStack) -}
5c0de5309821cf4d15df7df10a9ff059
  jqFilterParserTest15 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserTest18
                   Main.jqFilterParserTest17
                   Main.jqFilterParserTest18
                   Main.jqFilterParserTest16) -}
3d755a56ef0facc04830e97aca56eb9d
  jqFilterParserTest16 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 117#) -}
9f86046105151f38a2a33d119b363015
  jqFilterParserTest17 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 37#) -}
bd883409e80d4ab826703db3517761c4
  jqFilterParserTest18 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 35#) -}
766f3b5d63497c4fe22a21fe40e67711
  jqFilterParserTest19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser test 5"#) -}
245fb0e6f61399741f27ee83a947e1ad
  jqFilterParserTest2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest44
                   Main.jqFilterParserTest3) -}
b630c2732f9dda4244b420ea10a94109
  jqFilterParserTest20 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserTest31
                   Main.jqFilterParserTest21) -}
34fb3fb18fd4527b2e9bca03c13a6f53
  jqFilterParserTest21 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqFilterParserTest22) -}
d654461e9941f8213d23b4a18c3d026e
  jqFilterParserTest22 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserTest25
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest30
                   Main.jqFilterParserTest23) -}
c0a7f65e97b0a5a9b7c105de738a73bf
  jqFilterParserTest23 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserTest24) -}
4c7ac58c55f4efdb7c52094f7ce128f5
  jqFilterParserTest24 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".[0].fieldName"#) -}
566a28562cea33d50b9e9963901c9f50
  jqFilterParserTest25 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserTest26
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
d77f9022fe68f4d8a8d9a5abb79d9a6d
  jqFilterParserTest26 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserTest27) -}
412e53e1b87a05ddc00805fa05c45c25
  jqFilterParserTest27 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserTest28) -}
cd80d1158f8456ba5ee8f25cd448695d
  jqFilterParserTest28 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserTest29
                   GHC.Stack.Types.EmptyCallStack) -}
372b9bc00f6ffbb7d77b376e6b411177
  jqFilterParserTest29 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserTest30
                   Main.jqFilterParserTest17
                   Main.jqFilterParserTest30
                   Main.applyFilterTest33) -}
c36c4e4907f9fe70cd22abf95fa8aedc
  jqFilterParserTest3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest32
                   Main.jqFilterParserTest4) -}
8dfb3249024b66db316e0fcfba096333
  jqFilterParserTest30 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 34#) -}
ac41094175997517a3dda65aa0678940
  jqFilterParserTest31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser test 4"#) -}
ee5513a03d5b523d78cc7696f721e605
  jqFilterParserTest32 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserTest43
                   Main.jqFilterParserTest33) -}
86f57118294f127d53183d407860658b
  jqFilterParserTest33 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqFilterParserTest34) -}
2435dded77f6b99dfa0bb6fedeee313b
  jqFilterParserTest34 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserTest37
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest46
                   Main.jqFilterParserTest35) -}
aa348e4dc904363b815a1321d469dd61
  jqFilterParserTest35 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserTest36) -}
84504134c953f2f239271dab963b3d41
  jqFilterParserTest36 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".fieldName"#) -}
f89b5d55a242ec3c4d9257457989bb5c
  jqFilterParserTest37 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserTest38
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
71acae678f305fde9cf35ebb953ea329
  jqFilterParserTest38 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserTest39) -}
45631c4a6ad8a79eb41bad867aa98c09
  jqFilterParserTest39 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserTest40) -}
7dd8589b3c70e327e96a76e562ff751e
  jqFilterParserTest4 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest20
                   Main.jqFilterParserTest5) -}
3eca815cc6e80aaee1eaf4bb91ac5dc6
  jqFilterParserTest40 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserTest41
                   GHC.Stack.Types.EmptyCallStack) -}
114ea331d0c6f33c30de27e85f8bc830
  jqFilterParserTest41 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.applyFilterTest127
                   Main.jqFilterParserTest17
                   Main.applyFilterTest127
                   Main.jqFilterParserTest42) -}
2931a6c9c3be192a3b20c15b9d14e715
  jqFilterParserTest42 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 102#) -}
8d2139055341727a8877611c8ad8a18a
  jqFilterParserTest43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser test 3"#) -}
597ffce9847c7fcaf7ddf5ed4372dc88
  jqFilterParserTest44 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserTest56
                   Main.jqFilterParserTest45) -}
aae193c846282461e70ecc36b97ea658
  jqFilterParserTest45 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqFilterParserTest46) -}
36192cc7eb794a769ad46b535fb34b2b
  jqFilterParserTest46 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserTest49
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest58
                   Main.jqFilterParserTest47) -}
2b8794f744eb2a377d21a5330d5785b6
  jqFilterParserTest47 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserTest48) -}
9882f27ea8e1b69ab71bda767d5ad807
  jqFilterParserTest48 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# ".[0]"#) -}
cc7479229f030a3f6f2fb9e308ad62ad
  jqFilterParserTest49 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserTest50
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
427476c168c6f79fdc111cb1a6568156
  jqFilterParserTest5 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest6
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
c18c07a1bfa4948146db7c88676f2043
  jqFilterParserTest50 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserTest51) -}
10fd1b64ee6a3e8e09cbb8e7e8361e6a
  jqFilterParserTest51 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserTest52) -}
8505da45a0155f5135a722fb9ece763e
  jqFilterParserTest52 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserTest53
                   GHC.Stack.Types.EmptyCallStack) -}
4ff30d20387c275dd2412d1644d955e7
  jqFilterParserTest53 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserTest55
                   Main.jqFilterParserTest17
                   Main.jqFilterParserTest55
                   Main.jqFilterParserTest54) -}
26c474d13eb10a41602c203b11d579bd
  jqFilterParserTest54 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 86#) -}
cee08649d8c7690913a965d9931bc8e9
  jqFilterParserTest55 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 32#) -}
cee7789ebd3f184b0b855343505949d2
  jqFilterParserTest56 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser test 2"#) -}
a93d5232e66513ffc32cff5d104aed59
  jqFilterParserTest57 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserTest68
                   Main.jqFilterParserTest58) -}
1963e4dba285eff972c2fdc0fa50eb05
  jqFilterParserTest58 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqFilterParserTest59) -}
cf7fb3e3076b78c35844a7f17cc38d83
  jqFilterParserTest59 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserTest60
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest72
                   Main.applyFilterTest118) -}
5d31639b3c84934e6209c013823c5f85
  jqFilterParserTest6 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqFilterParserTest19
                   Main.jqFilterParserTest7) -}
68d7e661cb4778f868cef6138ff2857a
  jqFilterParserTest60 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqFilter)
                   Main.jqFilterParserTest61
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither2
                   Main.$s$fShowEither1) -}
e8202b96c329fce67504106ef6fd0c91
  jqFilterParserTest61 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqFilterParserTest62) -}
0c2212b5de4c9fedc8d95899e2a98bdb
  jqFilterParserTest62 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqFilterParserTest63) -}
6d85e9ad4cea19b9671acab9e4435306
  jqFilterParserTest63 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqFilterParserTest64
                   GHC.Stack.Types.EmptyCallStack) -}
8cec937305c5ac5f8db551cd56c255bf
  jqFilterParserTest64 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqFilterParserTest67
                   Main.jqFilterParserTest66
                   Main.jqFilterParserTest67
                   Main.jqFilterParserTest65) -}
9367322a263f6fd2f3f67cbc5cbcb7fd
  jqFilterParserTest65 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 70#) -}
98822b02d9050781b1ecdf95e6937fa0
  jqFilterParserTest66 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 36#) -}
6c372b8d80e74c8489176571d8a628ba
  jqFilterParserTest67 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 31#) -}
475f20786980c986d1d0187e4fc039cf
  jqFilterParserTest68 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqFilterParser test 1"#) -}
7654e8bb00a81a9c802bb5c91655f905
  jqFilterParserTest7 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqFilterParserTest8) -}
7f50e70907b6960f48715ea6069b614c
  jqFilterParserTest8 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqFilterParserTest11
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqFilterParserSpacesTest11
                   Main.jqFilterParserTest9) -}
2f4db3f03783bc7d82b8d21d9cf4be32
  jqFilterParserTest9 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.parserJqFilter
                   Main.jqFilterParserTest10) -}
a13ba45830b8e366653575d3ffc60b64
  jqQueryParserSpacesTest :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList
                   Main.jqQueryParserSpacesTest1) -}
4b749130164389592a6f90c63aa70d9a
  jqQueryParserSpacesTest1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserSpacesTest48
                   Main.jqQueryParserSpacesTest2) -}
85ddd07eeb54825ab34ff4b789c97e83
  jqQueryParserSpacesTest10 :: Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.JqQueryObject
                   Main.jqQueryParserSpacesTest11) -}
ede7c352c0d9a76a15755757adcd49bf
  jqQueryParserSpacesTest11 ::
    [(Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserSpacesTest16
                   Main.jqQueryParserSpacesTest12) -}
bb60ced024d933837ce6b6468078a38f
  jqQueryParserSpacesTest12 ::
    [(Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)]
  {- Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserSpacesTest13
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery))) -}
5147ed7c319bd301d8dcfce6549c00a7
  jqQueryParserSpacesTest13 ::
    (Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)
  {- Unfolding: ((Main.jqQueryParserSpacesTest15,
                  Main.jqQueryParserSpacesTest14)) -}
857d87dfa500e6d00591dbab5222c046
  jqQueryParserSpacesTest14 :: Data.Hjq.Parser.JqQuery
  {- HasNoCafRefs,
     Unfolding: (Data.Hjq.Parser.JqQueryArray
                   (GHC.Types.[] @ Data.Hjq.Parser.JqQuery)) -}
06e14ea3eb93e8dd409a71ec72d8dff9
  jqQueryParserSpacesTest15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "piyo"#) -}
817ae89c0ea31f3fa5d2fc70eecb05da
  jqQueryParserSpacesTest16 ::
    (Data.Text.Internal.Text, Data.Hjq.Parser.JqQuery)
  {- Unfolding: ((Main.jqQueryParserSpacesTest17,
                  Main.jqQueryParserSpacesTest14)) -}
843947b76de91ff930dfe2bbdb903fe1
  jqQueryParserSpacesTest17 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "hoge"#) -}
6743a52f932ee1674c20e362b6c44dfb
  jqQueryParserSpacesTest18 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserSpacesTest19
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
6332c2bc86b066adba4110a98d1ac30f
  jqQueryParserSpacesTest19 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserSpacesTest20) -}
2ee4f396ccd01c8e1bdee390a8c531ed
  jqQueryParserSpacesTest2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserSpacesTest27
                   Main.jqQueryParserSpacesTest3) -}
c2d60f22c840876cf0d8bc3b5df53039
  jqQueryParserSpacesTest20 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserSpacesTest21) -}
7e2d44a1867787fac43341d9a4c1cfc1
  jqQueryParserSpacesTest21 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserSpacesTest22
                   GHC.Stack.Types.EmptyCallStack) -}
dc91d5f9880ef0f183edff4d57f96665
  jqQueryParserSpacesTest22 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqQueryParserSpacesTest25
                   Main.jqQueryParserSpacesTest24
                   Main.applyFilterTest48
                   Main.jqQueryParserSpacesTest23) -}
44e24aab3886ff0ecea32a53f77a5285
  jqQueryParserSpacesTest23 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 87#) -}
5905ead58d6aa2d94ad1befc16caf832
  jqQueryParserSpacesTest24 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 41#) -}
413f572a08812bf07b6be37e0bd8d7c8
  jqQueryParserSpacesTest25 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 66#) -}
859d39df3991226eaf05c4910e174b36
  jqQueryParserSpacesTest26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQuerySpacesParser test 3"#) -}
0baae42ff07fc7ac690776fde3a28b9e
  jqQueryParserSpacesTest27 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserSpacesTest47
                   Main.jqQueryParserSpacesTest28) -}
7114d95a3ae51aaef9df927c4aecd572
  jqQueryParserSpacesTest28 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqQueryParserSpacesTest29) -}
916d5301ea65cf82fd4a7beb882e4994
  jqQueryParserSpacesTest29 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserSpacesTest40
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest32
                   Main.jqQueryParserSpacesTest30) -}
a066908c29aca7b2c0b0e4b0b9385fa0
  jqQueryParserSpacesTest3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserSpacesTest4
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
aaab7389f84c62df54f03f60dd02ed9b
  jqQueryParserSpacesTest30 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserSpacesTest31) -}
8dec8e9d26691ce1f636b21ab076333f
  jqQueryParserSpacesTest31 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   " [  . hoge  ,  .  piyo ] "#) -}
37c5109af96fa7c99f0d003dd7d26464
  jqQueryParserSpacesTest32 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqQuery
                   Main.jqQueryParserSpacesTest33) -}
4252b60ee5c8b49dde4e65651da0a9e3
  jqQueryParserSpacesTest33 :: Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.JqQueryArray
                   Main.jqQueryParserSpacesTest34) -}
2a72cb9fe9eab9bf5717b5fe20d76048
  jqQueryParserSpacesTest34 :: [Data.Hjq.Parser.JqQuery]
  {- Unfolding: (GHC.Types.:
                   @ Data.Hjq.Parser.JqQuery
                   Main.jqQueryParserSpacesTest38
                   Main.jqQueryParserSpacesTest35) -}
3c2eb82028593ee18932d664f008e30c
  jqQueryParserSpacesTest35 :: [Data.Hjq.Parser.JqQuery]
  {- Unfolding: (GHC.Types.:
                   @ Data.Hjq.Parser.JqQuery
                   Main.jqQueryParserSpacesTest36
                   (GHC.Types.[] @ Data.Hjq.Parser.JqQuery)) -}
90d5b54f327f9c3313dabee778a08d75
  jqQueryParserSpacesTest36 :: Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.JqQueryFilter
                   Main.jqQueryParserSpacesTest37) -}
c48c8ead4208051a0742c3c7994c50a5
  jqQueryParserSpacesTest37 :: Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.JqField
                   Main.jqQueryParserSpacesTest15
                   Data.Hjq.Parser.JqNil) -}
73988deb97bb1033139ee3876e17e757
  jqQueryParserSpacesTest38 :: Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.JqQueryFilter
                   Main.jqQueryParserSpacesTest39) -}
665414fdcf5d7b81526cfd67dabb3522
  jqQueryParserSpacesTest39 :: Data.Hjq.Parser.JqFilter
  {- Unfolding: (Data.Hjq.Parser.JqField
                   Main.jqQueryParserSpacesTest17
                   Data.Hjq.Parser.JqNil) -}
b98f3ba799b4579cfc0f6c1cd50aa394
  jqQueryParserSpacesTest4 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserSpacesTest26
                   Main.jqQueryParserSpacesTest5) -}
8deef6cdc75a9bfc542d9f05a7ecc9a1
  jqQueryParserSpacesTest40 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserSpacesTest41
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
a96ac468f2c133ba24316e38abfc95bc
  jqQueryParserSpacesTest41 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserSpacesTest42) -}
a05ec50f96e54d1db5e03c48edbfcef1
  jqQueryParserSpacesTest42 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserSpacesTest43) -}
b9a29e7644bab3dd0cca20ab0282d6b0
  jqQueryParserSpacesTest43 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserSpacesTest44
                   GHC.Stack.Types.EmptyCallStack) -}
a27eedbf8bd7b27d100e892516377e8a
  jqQueryParserSpacesTest44 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqQueryParserSpacesTest46
                   Main.jqQueryParserSpacesTest24
                   Main.jqQueryParserSpacesTest45
                   Main.applyFilterTest95) -}
b7d8e630ee2f899b8dd68e5261686628
  jqQueryParserSpacesTest45 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 65#) -}
b757693d91d47fff5e3df9db5814cd4e
  jqQueryParserSpacesTest46 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 64#) -}
9f4033a4496016a028877be6b19bd58a
  jqQueryParserSpacesTest47 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQuerySpacesParser test 2"#) -}
e48ccf2541eb8c0de76cfcc023dd2501
  jqQueryParserSpacesTest48 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserSpacesTest61
                   Main.jqQueryParserSpacesTest49) -}
98b84d2c99ac770e5726a452826b0ce9
  jqQueryParserSpacesTest49 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqQueryParserSpacesTest50) -}
e69c706b64338977fddd1d4fcd9893d9
  jqQueryParserSpacesTest5 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   Main.jqQueryParserSpacesTest6) -}
3c33e8b88bc99dea7efa5ecafa93bf06
  jqQueryParserSpacesTest50 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserSpacesTest54
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest53
                   Main.jqQueryParserSpacesTest51) -}
ca1fa4c2338be7ed9a509e00e2ad82ad
  jqQueryParserSpacesTest51 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserSpacesTest52) -}
6f6516dc2f6b3b8af194c49a892f9ec6
  jqQueryParserSpacesTest52 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "  [  ]  "#) -}
ca1b27ce45c2f0e2342b3015dda60c46
  jqQueryParserSpacesTest53 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqQuery
                   Main.jqQueryParserSpacesTest14) -}
759192dd1f4e8d3d1c439e42e98eb7b6
  jqQueryParserSpacesTest54 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserSpacesTest55
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
f000396741b547e2305a929193169b91
  jqQueryParserSpacesTest55 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserSpacesTest56) -}
2d5895b554c24f0c40e32513e91d50e8
  jqQueryParserSpacesTest56 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserSpacesTest57) -}
d15a3d38232a12ffe37802f8c26a4c4f
  jqQueryParserSpacesTest57 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserSpacesTest58
                   GHC.Stack.Types.EmptyCallStack) -}
59cbc887b5b8552bb328a1245877e0f9
  jqQueryParserSpacesTest58 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqQueryParserSpacesTest60
                   Main.jqQueryParserSpacesTest24
                   Main.jqQueryParserSpacesTest60
                   Main.jqQueryParserSpacesTest59) -}
c1c4c1d738bc69616ba0448051ebe45c
  jqQueryParserSpacesTest59 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 92#) -}
639f843861f3d389d6a9759f23e02fd5
  jqQueryParserSpacesTest6 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserSpacesTest18
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest9
                   Main.jqQueryParserSpacesTest7) -}
4425e92627d6450b392b05d352e22b87
  jqQueryParserSpacesTest60 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 63#) -}
9f85431b9be92f3a1dab0ae15440ccfa
  jqQueryParserSpacesTest61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQuerySpacesParser test 1"#) -}
c6edce8a1cdaf33038fc81ee932c0336
  jqQueryParserSpacesTest7 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserSpacesTest8) -}
afca8a1a57ae67d4ac638642fdc89119
  jqQueryParserSpacesTest8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   " {   \"  hoge  \"  : [   ]  , \" piyo \" : [ ] } "#) -}
da19d7a0c6128069e2fdba2ba376f48a
  jqQueryParserSpacesTest9 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Either.Right
                   @ Data.Text.Internal.Text
                   @ Data.Hjq.Parser.JqQuery
                   Main.jqQueryParserSpacesTest10) -}
e186f9f14acfc1591d1deed178fc74dd
  jqQueryParserTest :: Test.HUnit.Base.Test
  {- Strictness: m2,
     Unfolding: (Test.HUnit.Base.TestList Main.jqQueryParserTest1) -}
3f7ddadf66d10373d8db8ad523be4c08
  jqQueryParserTest1 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserTest30
                   Main.jqQueryParserTest2) -}
2fd0be2e318a6e2dbdba9a58ce79c024
  jqQueryParserTest10 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserTest11) -}
adcee2db913a3b9725b0bd58466ee9e4
  jqQueryParserTest11 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserTest12) -}
f93b6eca1a2f3cdccb99fc027881fdbe
  jqQueryParserTest12 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserTest13
                   GHC.Stack.Types.EmptyCallStack) -}
d1f4b816d379b7a5c5a089094d1428e6
  jqQueryParserTest13 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqQueryParserTest15
                   Main.jqFilterParserTest18
                   Main.jqQueryParserTest14
                   Main.jqQueryParserSpacesTest23) -}
f82ba7a869bbe04b170a1c3c131b4203
  jqQueryParserTest14 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 57#) -}
8c62c14711c1d6819369383a6fde18eb
  jqQueryParserTest15 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 56#) -}
86491c7679b9f16963097303f5feb103
  jqQueryParserTest16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQueryParser test 3"#) -}
5d191bbbe56da4edeed2aa932ff09dca
  jqQueryParserTest17 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserTest29
                   Main.jqQueryParserTest18) -}
b989690e9fbb10f8317af634ee6555d2
  jqQueryParserTest18 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqQueryParserTest19) -}
3708b386371e7a055aa99f9f0cab06e5
  jqQueryParserTest19 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserTest22
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest32
                   Main.jqQueryParserTest20) -}
20913abe45ebf2cb433cb82175fce521
  jqQueryParserTest2 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserTest17
                   Main.jqQueryParserTest3) -}
df1eea5c6fb1f653de1b57c487efd0f7
  jqQueryParserTest20 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserTest21) -}
269956c5672dc16a42de603316902e6e
  jqQueryParserTest21 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "[.hoge,.piyo]"#) -}
8ee09af67bd4212986e0909af1d6bd82
  jqQueryParserTest22 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserTest23
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
70414c47e9e82ccbee9c7f22202a4374
  jqQueryParserTest23 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserTest24) -}
4336ae321e1cbca0f6172ab018a888eb
  jqQueryParserTest24 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserTest25) -}
2461e205e10e0edf83c1f7c7227e4920
  jqQueryParserTest25 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserTest26
                   GHC.Stack.Types.EmptyCallStack) -}
5bd674b1f962c1e2696a46c91c30c749
  jqQueryParserTest26 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqQueryParserTest28
                   Main.jqFilterParserTest18
                   Main.jqQueryParserTest27
                   Main.applyFilterTest95) -}
4f602325ef8627218e8dd142f9a98e12
  jqQueryParserTest27 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 55#) -}
5699e74c0713ccd12ce429eb27485885
  jqQueryParserTest28 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 54#) -}
bd464ce4ab750d0fb589cddc02ed8403
  jqQueryParserTest29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQueryParser test 2"#) -}
b4018deaef9798cbea0cc0b5e03de06c
  jqQueryParserTest3 :: [Test.HUnit.Base.Test]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserTest4
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
de155552d87f9bb86c54b35900608d1a
  jqQueryParserTest30 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserTest42
                   Main.jqQueryParserTest31) -}
ce55991e8028cbda9e15ef7842b1c66e
  jqQueryParserTest31 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqQueryParserTest32) -}
de863ca5838c07c9827dfaec1e6891c5
  jqQueryParserTest32 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserTest35
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest53
                   Main.jqQueryParserTest33) -}
2e0751631cf839f6c7fc901129aea3a9
  jqQueryParserTest33 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserTest34) -}
b9a650ce36e6b4252615d3085c36977a
  jqQueryParserTest34 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "[]"#) -}
a148e90fa2aabcaecf4a051480fc9200
  jqQueryParserTest35 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserTest36
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
9a23a8b671f66070ee6d995814f98489
  jqQueryParserTest36 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.@=?5
                   Test.HUnit.Base.@?=1
                   Main.jqQueryParserTest37) -}
717d5a8f50892fb811a28aee01ccb9f8
  jqQueryParserTest37 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.HUnit.Base.~?=3
                   Test.HUnit.Base.~?=1
                   Main.jqQueryParserTest38) -}
5a22d287f41e3e4011ed0d58cf1b0924
  jqQueryParserTest38 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.applyFilterTest34
                   Main.jqQueryParserTest39
                   GHC.Stack.Types.EmptyCallStack) -}
64466f9c423da6f007308bf15481dd72
  jqQueryParserTest39 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.applyFilterTest21
                   Main.applyFilterTest20
                   Main.applyFilterTest19
                   Main.jqQueryParserTest41
                   Main.jqFilterParserTest18
                   Main.jqQueryParserTest41
                   Main.jqQueryParserTest40) -}
bcd40fb7ab72d921ff1c332fdb4c5df9
  jqQueryParserTest4 :: Test.HUnit.Base.Test
  {- Strictness: m3,
     Unfolding: (Test.HUnit.Base.TestLabel
                   Main.jqQueryParserTest16
                   Main.jqQueryParserTest5) -}
1fd3b187647502b9a1c21cc5a87faa16
  jqQueryParserTest40 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 80#) -}
55bb7d18f47d142641ae77134dfb21e5
  jqQueryParserTest41 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 53#) -}
dae68d733b1b9a00499036ffe7521458
  jqQueryParserTest42 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "jqQueryParser test 1"#) -}
2e3568cbf1a21cfb4ef6a4f6d85f9b2a
  jqQueryParserTest5 :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase Main.jqQueryParserTest6) -}
91dcda93164f9c26d5e38a7f40077257
  jqQueryParserTest6 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (Main.jqQueryParserTest9
                   (GHC.Types.[] @ GHC.Types.Char)
                   Main.jqQueryParserSpacesTest9
                   Main.jqQueryParserTest7) -}
7aeffaafc9058bb51fefcc2cb7b922a7
  jqQueryParserTest7 ::
    Data.Either.Either Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
  {- Unfolding: (Data.Hjq.Parser.parseJqQuery
                   Main.jqQueryParserTest8) -}
ffd93e9df3a128a01753ad48f31e6a04
  jqQueryParserTest8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   "{\"hoge\":[],\"piyo\":[]}"#) -}
11a6706d2b5f70f01ac31b7d35ed9248
  jqQueryParserTest9 ::
    GHC.Base.String
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Data.Either.Either
         Data.Text.Internal.Text Data.Hjq.Parser.JqQuery
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (Data.Either.Either
                        Data.Text.Internal.Text Data.Hjq.Parser.JqQuery)
                   Main.jqQueryParserTest10
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fEqEither1
                   Main.$s$fShowEither) -}
74a5afafb4fd3a4047c205930a6d16f4
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
c4583e355018c5b050fa2503f0d548ab
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Test.HUnit.Text.runTestTT3 of ww { Test.HUnit.Text.PutText ww1 ww2 ->
                 case Test.HUnit.Text.$wrunTestText
                        @ GHC.Types.Int
                        ww1
                        ww2
                        Main.main4
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) counts' ds ->
                 case ds of wild1 { GHC.Types.I# ds2 ->
                 case ds2 of ds3 {
                   DEFAULT
                   -> case GHC.Prim.raiseIO#
                             @ GHC.Exception.SomeException
                             @ Test.HUnit.Base.Counts
                             Main.main2
                             ipv
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   0# -> (# ipv, GHC.Tuple.() #) } } } } }) -}
4be9014f636c8745c15a350d362ab05e
  main10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
ae3e872adfdcf027a2673d2ce525553f
  main2 :: GHC.Exception.SomeException
  {- Unfolding: (GHC.IO.Exception.$fExceptionIOException_$ctoException
                   Main.main3) -}
f6cff754cc6dc1f89e02c82b78ac6058
  main3 :: GHC.IO.Exception.IOException
  {- Unfolding: (GHC.IO.Exception.IOError
                   (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
                   GHC.IO.Exception.UserError
                   (GHC.Types.[] @ GHC.Types.Char)
                   Test.HUnit.Text.runTestTT2
                   (GHC.Base.Nothing @ Foreign.C.Types.CInt)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
d19a2ae9ef229ecfb92e646082df5bfb
  main4 :: Test.HUnit.Base.Test
  {- Unfolding: (Test.HUnit.Base.TestList Main.main5) -}
bff8d2cf7aee5aef1c124b9939285a96
  main5 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserTest
                   Main.main6) -}
13d08acbe04e23ec271cf2251201035b
  main6 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqFilterParserSpacesTest
                   Main.main7) -}
917ece55b17de3ffee65399a9bc422fc
  main7 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserTest
                   Main.main8) -}
eb4035057fc2cc0f5464d15a602d9a96
  main8 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.jqQueryParserSpacesTest
                   Main.main9) -}
086bcd6435a8794f45dc983137ef7938
  main9 :: [Test.HUnit.Base.Test]
  {- Unfolding: (GHC.Types.:
                   @ Test.HUnit.Base.Test
                   Main.applyFilterTest
                   (GHC.Types.[] @ Test.HUnit.Base.Test)) -}
b2249e5fdf5bfe5b3beca35dda29e7d9
  testData :: Data.Aeson.Types.Internal.Value
bacac3a3484cf6cc4b80068d80c09f4d
  unsafeParserFilter ::
    Data.Text.Internal.Text -> Data.Hjq.Parser.JqFilter
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ (t :: Data.Text.Internal.Text) ->
                 case Data.Hjq.Parser.parserJqFilter t of wild {
                   Data.Either.Left s -> Main.unsafeParserFilter1 s
                   Data.Either.Right f -> f }) -}
a5e1920503a92337060707c886e3d5d9
  unsafeParserFilter1 ::
    Data.Text.Internal.Text -> Data.Hjq.Parser.JqFilter
  {- Arity: 1, Strictness: <L,U>x -}
"SPEC/Main $fEqEither @ Text @ JqFilter" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                     Data.Text.Internal.Text)
                                                         ($dEq :: GHC.Classes.Eq
                                                                    Data.Hjq.Parser.JqFilter)
  Data.Either.$fEqEither @ Data.Text.Internal.Text
                         @ Data.Hjq.Parser.JqFilter
                         $dEq
                         $dEq1
  = Main.$s$fEqEither2
"SPEC/Main $fEqEither @ Text @ JqQuery" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                    Data.Text.Internal.Text)
                                                        ($dEq :: GHC.Classes.Eq
                                                                   Data.Hjq.Parser.JqQuery)
  Data.Either.$fEqEither @ Data.Text.Internal.Text
                         @ Data.Hjq.Parser.JqQuery
                         $dEq
                         $dEq1
  = Main.$s$fEqEither1
"SPEC/Main $fEqEither @ Text @ Value" [ALWAYS] forall ($dEq1 :: GHC.Classes.Eq
                                                                  Data.Text.Internal.Text)
                                                      ($dEq :: GHC.Classes.Eq
                                                                 Data.Aeson.Types.Internal.Value)
  Data.Either.$fEqEither @ Data.Text.Internal.Text
                         @ Data.Aeson.Types.Internal.Value
                         $dEq
                         $dEq1
  = Main.$s$fEqEither
"SPEC/Main $fEqMaybe @ (Either Text Value)" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                       (Data.Either.Either
                                                                          Data.Text.Internal.Text
                                                                          Data.Aeson.Types.Internal.Value))
  GHC.Base.$fEqMaybe @ (Data.Either.Either
                          Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                     $dEq
  = Main.$s$fEqMaybe
"SPEC/Main $fShowEither @ Text @ JqFilter" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                         Data.Text.Internal.Text)
                                                           ($dShow :: GHC.Show.Show
                                                                        Data.Hjq.Parser.JqFilter)
  Data.Either.$fShowEither @ Data.Text.Internal.Text
                           @ Data.Hjq.Parser.JqFilter
                           $dShow
                           $dShow1
  = Main.$s$fShowEither1
"SPEC/Main $fShowEither @ Text @ JqQuery" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                        Data.Text.Internal.Text)
                                                          ($dShow :: GHC.Show.Show
                                                                       Data.Hjq.Parser.JqQuery)
  Data.Either.$fShowEither @ Data.Text.Internal.Text
                           @ Data.Hjq.Parser.JqQuery
                           $dShow
                           $dShow1
  = Main.$s$fShowEither
"SPEC/Main $fShowEither @ Text @ Value" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                      Data.Text.Internal.Text)
                                                        ($dShow :: GHC.Show.Show
                                                                     Data.Aeson.Types.Internal.Value)
  Data.Either.$fShowEither @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value
                           $dShow
                           $dShow1
  = Main.$s$fShowEither2
"SPEC/Main $fShowEither_$cshowList @ Text @ JqFilter" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                    Data.Text.Internal.Text)
                                                                      ($dShow :: GHC.Show.Show
                                                                                   Data.Hjq.Parser.JqFilter)
  Data.Either.$fShowEither_$cshowList @ Data.Text.Internal.Text
                                      @ Data.Hjq.Parser.JqFilter
                                      $dShow
                                      $dShow1
  = Main.$s$fShowEither_$s$fShowEither_$cshowList1
"SPEC/Main $fShowEither_$cshowList @ Text @ JqQuery" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                   Data.Text.Internal.Text)
                                                                     ($dShow :: GHC.Show.Show
                                                                                  Data.Hjq.Parser.JqQuery)
  Data.Either.$fShowEither_$cshowList @ Data.Text.Internal.Text
                                      @ Data.Hjq.Parser.JqQuery
                                      $dShow
                                      $dShow1
  = Main.$s$fShowEither_$s$fShowEither_$cshowList
"SPEC/Main $fShowEither_$cshowList @ Text @ Value" [ALWAYS] forall ($dShow1 :: GHC.Show.Show
                                                                                 Data.Text.Internal.Text)
                                                                   ($dShow :: GHC.Show.Show
                                                                                Data.Aeson.Types.Internal.Value)
  Data.Either.$fShowEither_$cshowList @ Data.Text.Internal.Text
                                      @ Data.Aeson.Types.Internal.Value
                                      $dShow
                                      $dShow1
  = Main.$s$fShowEither_$s$fShowEither_$cshowList2
"SPEC/Main $fShowMaybe @ (Either Text Value)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                           (Data.Either.Either
                                                                              Data.Text.Internal.Text
                                                                              Data.Aeson.Types.Internal.Value))
  GHC.Show.$fShowMaybe @ (Data.Either.Either
                            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                       $dShow
  = Main.$s$fShowMaybe
"SPEC/Main $fShowMaybe_$cshowList @ (Either Text Value)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                      (Data.Either.Either
                                                                                         Data.Text.Internal.Text
                                                                                         Data.Aeson.Types.Internal.Value))
  GHC.Show.$fShowMaybe_$cshowList @ (Data.Either.Either
                                       Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                  $dShow
  = Main.$s$fShowMaybe_$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

